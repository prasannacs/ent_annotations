"use strict";
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.EndpointServiceClient = void 0;
/* global window */
const gax = require("google-gax");
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1/endpoint_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./endpoint_service_client_config.json");
const google_gax_1 = require("google-gax");
const version = require('../../../package.json').version;
/**
 * @class
 * @memberof v1
 */
class EndpointServiceClient {
    /**
     * Construct an instance of EndpointServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gax.fallback : gax;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            annotationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}/annotations/{annotation}'),
            annotationSpecPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}'),
            artifactPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}'),
            batchPredictionJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}'),
            contextPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/metadataStores/{metadata_store}/contexts/{context}'),
            customJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/customJobs/{custom_job}'),
            dataItemPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}'),
            dataLabelingJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}'),
            datasetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}'),
            endpointPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/endpoints/{endpoint}'),
            executionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/metadataStores/{metadata_store}/executions/{execution}'),
            hyperparameterTuningJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            modelPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/models/{model}'),
            modelEvaluationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}'),
            modelEvaluationSlicePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}/slices/{slice}'),
            pipelineJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/pipelineJobs/{pipeline_job}'),
            specialistPoolPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/specialistPools/{specialist_pool}'),
            trainingPipelinePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/trainingPipelines/{training_pipeline}'),
            trialPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/studies/{study}/trials/{trial}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listEndpoints: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'endpoints'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        this.operationsClient = this._gaxModule
            .lro({
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        })
            .operationsClient(opts);
        const createEndpointResponse = protoFilesRoot.lookup('.google.cloud.aiplatform.v1.Endpoint');
        const createEndpointMetadata = protoFilesRoot.lookup('.google.cloud.aiplatform.v1.CreateEndpointOperationMetadata');
        const deleteEndpointResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteEndpointMetadata = protoFilesRoot.lookup('.google.cloud.aiplatform.v1.DeleteOperationMetadata');
        const deployModelResponse = protoFilesRoot.lookup('.google.cloud.aiplatform.v1.DeployModelResponse');
        const deployModelMetadata = protoFilesRoot.lookup('.google.cloud.aiplatform.v1.DeployModelOperationMetadata');
        const undeployModelResponse = protoFilesRoot.lookup('.google.cloud.aiplatform.v1.UndeployModelResponse');
        const undeployModelMetadata = protoFilesRoot.lookup('.google.cloud.aiplatform.v1.UndeployModelOperationMetadata');
        this.descriptors.longrunning = {
            createEndpoint: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createEndpointResponse.decode.bind(createEndpointResponse), createEndpointMetadata.decode.bind(createEndpointMetadata)),
            deleteEndpoint: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteEndpointResponse.decode.bind(deleteEndpointResponse), deleteEndpointMetadata.decode.bind(deleteEndpointMetadata)),
            deployModel: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deployModelResponse.decode.bind(deployModelResponse), deployModelMetadata.decode.bind(deployModelMetadata)),
            undeployModel: new this._gaxModule.LongrunningDescriptor(this.operationsClient, undeployModelResponse.decode.bind(undeployModelResponse), undeployModelMetadata.decode.bind(undeployModelMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.aiplatform.v1.EndpointService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = gax.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.endpointServiceStub) {
            return this.endpointServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.aiplatform.v1.EndpointService.
        this.endpointServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.aiplatform.v1.EndpointService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.aiplatform.v1.EndpointService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const endpointServiceStubMethods = [
            'createEndpoint',
            'getEndpoint',
            'listEndpoints',
            'updateEndpoint',
            'deleteEndpoint',
            'deployModel',
            'undeployModel',
        ];
        for (const methodName of endpointServiceStubMethods) {
            const callPromise = this.endpointServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.endpointServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'aiplatform.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'aiplatform.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    /**
     * Gets an Endpoint.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the Endpoint resource.
     *   Format:
     *   `projects/{project}/locations/{location}/endpoints/{endpoint}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Endpoint]{@link google.cloud.aiplatform.v1.Endpoint}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.getEndpoint(request);
     */
    getEndpoint(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getEndpoint(request, options, callback);
    }
    /**
     * Updates an Endpoint.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.aiplatform.v1.Endpoint} request.endpoint
     *   Required. The Endpoint which replaces the resource on the server.
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. The update mask applies to the resource. See {@link google.protobuf.FieldMask|google.protobuf.FieldMask}.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Endpoint]{@link google.cloud.aiplatform.v1.Endpoint}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.updateEndpoint(request);
     */
    updateEndpoint(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'endpoint.name': request.endpoint.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateEndpoint(request, options, callback);
    }
    /**
     * Creates an Endpoint.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location to create the Endpoint in.
     *   Format: `projects/{project}/locations/{location}`
     * @param {google.cloud.aiplatform.v1.Endpoint} request.endpoint
     *   Required. The Endpoint to create.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const [operation] = await client.createEndpoint(request);
     * const [response] = await operation.promise();
     */
    createEndpoint(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createEndpoint(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createEndpoint()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkCreateEndpointProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    async checkCreateEndpointProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createEndpoint, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Deletes an Endpoint.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The name of the Endpoint resource to be deleted.
     *   Format:
     *   `projects/{project}/locations/{location}/endpoints/{endpoint}`
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const [operation] = await client.deleteEndpoint(request);
     * const [response] = await operation.promise();
     */
    deleteEndpoint(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteEndpoint(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteEndpoint()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkDeleteEndpointProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    async checkDeleteEndpointProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteEndpoint, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Deploys a Model into this Endpoint, creating a DeployedModel within it.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.endpoint
     *   Required. The name of the Endpoint resource into which to deploy a Model.
     *   Format:
     *   `projects/{project}/locations/{location}/endpoints/{endpoint}`
     * @param {google.cloud.aiplatform.v1.DeployedModel} request.deployedModel
     *   Required. The DeployedModel to be created within the Endpoint. Note that
     *   {@link google.cloud.aiplatform.v1.Endpoint.traffic_split|Endpoint.traffic_split} must be updated for the DeployedModel to start
     *   receiving traffic, either as part of this call, or via
     *   {@link google.cloud.aiplatform.v1.EndpointService.UpdateEndpoint|EndpointService.UpdateEndpoint}.
     * @param {number[]} request.trafficSplit
     *   A map from a DeployedModel's ID to the percentage of this Endpoint's
     *   traffic that should be forwarded to that DeployedModel.
     *
     *   If this field is non-empty, then the Endpoint's
     *   {@link google.cloud.aiplatform.v1.Endpoint.traffic_split|traffic_split} will be overwritten with it.
     *   To refer to the ID of the just being deployed Model, a "0" should be used,
     *   and the actual ID of the new DeployedModel will be filled in its place by
     *   this method. The traffic percentage values must add up to 100.
     *
     *   If this field is empty, then the Endpoint's
     *   {@link google.cloud.aiplatform.v1.Endpoint.traffic_split|traffic_split} is not updated.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const [operation] = await client.deployModel(request);
     * const [response] = await operation.promise();
     */
    deployModel(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                endpoint: request.endpoint || '',
            });
        this.initialize();
        return this.innerApiCalls.deployModel(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deployModel()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkDeployModelProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    async checkDeployModelProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deployModel, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Undeploys a Model from an Endpoint, removing a DeployedModel from it, and
     * freeing all resources it's using.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.endpoint
     *   Required. The name of the Endpoint resource from which to undeploy a Model.
     *   Format:
     *   `projects/{project}/locations/{location}/endpoints/{endpoint}`
     * @param {string} request.deployedModelId
     *   Required. The ID of the DeployedModel to be undeployed from the Endpoint.
     * @param {number[]} request.trafficSplit
     *   If this field is provided, then the Endpoint's
     *   {@link google.cloud.aiplatform.v1.Endpoint.traffic_split|traffic_split} will be overwritten with it. If
     *   last DeployedModel is being undeployed from the Endpoint, the
     *   [Endpoint.traffic_split] will always end up empty when this call returns.
     *   A DeployedModel will be successfully undeployed only if it doesn't have
     *   any traffic assigned to it when this method executes, or if this field
     *   unassigns any traffic to it.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const [operation] = await client.undeployModel(request);
     * const [response] = await operation.promise();
     */
    undeployModel(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                endpoint: request.endpoint || '',
            });
        this.initialize();
        return this.innerApiCalls.undeployModel(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `undeployModel()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkUndeployModelProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    async checkUndeployModelProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.undeployModel, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Lists Endpoints in a Location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location from which to list the Endpoints.
     *   Format: `projects/{project}/locations/{location}`
     * @param {string} [request.filter]
     *   Optional. An expression for filtering the results of the request. For field names
     *   both snake_case and camelCase are supported.
     *
     *     * `endpoint` supports = and !=. `endpoint` represents the Endpoint ID,
     *       i.e. the last segment of the Endpoint's {@link google.cloud.aiplatform.v1.Endpoint.name|resource name}.
     *     * `display_name` supports = and, !=
     *     * `labels` supports general map functions that is:
     *       * `labels.key=value` - key:value equality
     *       * `labels.key:* or labels:key - key existence
     *       * A key including a space must be quoted. `labels."a key"`.
     *
     *   Some examples:
     *     * `endpoint=1`
     *     * `displayName="myDisplayName"`
     *     * `labels.myKey="myValue"`
     * @param {number} [request.pageSize]
     *   Optional. The standard list page size.
     * @param {string} [request.pageToken]
     *   Optional. The standard list page token.
     *   Typically obtained via
     *   {@link google.cloud.aiplatform.v1.ListEndpointsResponse.next_page_token|ListEndpointsResponse.next_page_token} of the previous
     *   {@link google.cloud.aiplatform.v1.EndpointService.ListEndpoints|EndpointService.ListEndpoints} call.
     * @param {google.protobuf.FieldMask} [request.readMask]
     *   Optional. Mask specifying which fields to read.
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `display_name`
     *     * `create_time`
     *     * `update_time`
     *
     *   Example: `display_name, create_time desc`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [Endpoint]{@link google.cloud.aiplatform.v1.Endpoint}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listEndpointsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listEndpoints(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listEndpoints(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location from which to list the Endpoints.
     *   Format: `projects/{project}/locations/{location}`
     * @param {string} [request.filter]
     *   Optional. An expression for filtering the results of the request. For field names
     *   both snake_case and camelCase are supported.
     *
     *     * `endpoint` supports = and !=. `endpoint` represents the Endpoint ID,
     *       i.e. the last segment of the Endpoint's {@link google.cloud.aiplatform.v1.Endpoint.name|resource name}.
     *     * `display_name` supports = and, !=
     *     * `labels` supports general map functions that is:
     *       * `labels.key=value` - key:value equality
     *       * `labels.key:* or labels:key - key existence
     *       * A key including a space must be quoted. `labels."a key"`.
     *
     *   Some examples:
     *     * `endpoint=1`
     *     * `displayName="myDisplayName"`
     *     * `labels.myKey="myValue"`
     * @param {number} [request.pageSize]
     *   Optional. The standard list page size.
     * @param {string} [request.pageToken]
     *   Optional. The standard list page token.
     *   Typically obtained via
     *   {@link google.cloud.aiplatform.v1.ListEndpointsResponse.next_page_token|ListEndpointsResponse.next_page_token} of the previous
     *   {@link google.cloud.aiplatform.v1.EndpointService.ListEndpoints|EndpointService.ListEndpoints} call.
     * @param {google.protobuf.FieldMask} [request.readMask]
     *   Optional. Mask specifying which fields to read.
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `display_name`
     *     * `create_time`
     *     * `update_time`
     *
     *   Example: `display_name, create_time desc`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Endpoint]{@link google.cloud.aiplatform.v1.Endpoint} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listEndpointsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listEndpointsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listEndpoints.createStream(this.innerApiCalls.listEndpoints, request, callSettings);
    }
    /**
     * Equivalent to `listEndpoints`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location from which to list the Endpoints.
     *   Format: `projects/{project}/locations/{location}`
     * @param {string} [request.filter]
     *   Optional. An expression for filtering the results of the request. For field names
     *   both snake_case and camelCase are supported.
     *
     *     * `endpoint` supports = and !=. `endpoint` represents the Endpoint ID,
     *       i.e. the last segment of the Endpoint's {@link google.cloud.aiplatform.v1.Endpoint.name|resource name}.
     *     * `display_name` supports = and, !=
     *     * `labels` supports general map functions that is:
     *       * `labels.key=value` - key:value equality
     *       * `labels.key:* or labels:key - key existence
     *       * A key including a space must be quoted. `labels."a key"`.
     *
     *   Some examples:
     *     * `endpoint=1`
     *     * `displayName="myDisplayName"`
     *     * `labels.myKey="myValue"`
     * @param {number} [request.pageSize]
     *   Optional. The standard list page size.
     * @param {string} [request.pageToken]
     *   Optional. The standard list page token.
     *   Typically obtained via
     *   {@link google.cloud.aiplatform.v1.ListEndpointsResponse.next_page_token|ListEndpointsResponse.next_page_token} of the previous
     *   {@link google.cloud.aiplatform.v1.EndpointService.ListEndpoints|EndpointService.ListEndpoints} call.
     * @param {google.protobuf.FieldMask} [request.readMask]
     *   Optional. Mask specifying which fields to read.
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order.
     *   Use "desc" after a field name for descending.
     *   Supported fields:
     *     * `display_name`
     *     * `create_time`
     *     * `update_time`
     *
     *   Example: `display_name, create_time desc`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Endpoint]{@link google.cloud.aiplatform.v1.Endpoint}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listEndpointsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listEndpointsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listEndpoints.asyncIterate(this.innerApiCalls['listEndpoints'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified annotation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} data_item
     * @param {string} annotation
     * @returns {string} Resource name string.
     */
    annotationPath(project, location, dataset, dataItem, annotation) {
        return this.pathTemplates.annotationPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
            data_item: dataItem,
            annotation: annotation,
        });
    }
    /**
     * Parse the project from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAnnotationName(annotationName) {
        return this.pathTemplates.annotationPathTemplate.match(annotationName)
            .project;
    }
    /**
     * Parse the location from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAnnotationName(annotationName) {
        return this.pathTemplates.annotationPathTemplate.match(annotationName)
            .location;
    }
    /**
     * Parse the dataset from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromAnnotationName(annotationName) {
        return this.pathTemplates.annotationPathTemplate.match(annotationName)
            .dataset;
    }
    /**
     * Parse the data_item from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the data_item.
     */
    matchDataItemFromAnnotationName(annotationName) {
        return this.pathTemplates.annotationPathTemplate.match(annotationName)
            .data_item;
    }
    /**
     * Parse the annotation from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the annotation.
     */
    matchAnnotationFromAnnotationName(annotationName) {
        return this.pathTemplates.annotationPathTemplate.match(annotationName)
            .annotation;
    }
    /**
     * Return a fully-qualified annotationSpec resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} annotation_spec
     * @returns {string} Resource name string.
     */
    annotationSpecPath(project, location, dataset, annotationSpec) {
        return this.pathTemplates.annotationSpecPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
            annotation_spec: annotationSpec,
        });
    }
    /**
     * Parse the project from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).project;
    }
    /**
     * Parse the location from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).location;
    }
    /**
     * Parse the dataset from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).dataset;
    }
    /**
     * Parse the annotation_spec from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the annotation_spec.
     */
    matchAnnotationSpecFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).annotation_spec;
    }
    /**
     * Return a fully-qualified artifact resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} metadata_store
     * @param {string} artifact
     * @returns {string} Resource name string.
     */
    artifactPath(project, location, metadataStore, artifact) {
        return this.pathTemplates.artifactPathTemplate.render({
            project: project,
            location: location,
            metadata_store: metadataStore,
            artifact: artifact,
        });
    }
    /**
     * Parse the project from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromArtifactName(artifactName) {
        return this.pathTemplates.artifactPathTemplate.match(artifactName).project;
    }
    /**
     * Parse the location from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromArtifactName(artifactName) {
        return this.pathTemplates.artifactPathTemplate.match(artifactName).location;
    }
    /**
     * Parse the metadata_store from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the metadata_store.
     */
    matchMetadataStoreFromArtifactName(artifactName) {
        return this.pathTemplates.artifactPathTemplate.match(artifactName)
            .metadata_store;
    }
    /**
     * Parse the artifact from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the artifact.
     */
    matchArtifactFromArtifactName(artifactName) {
        return this.pathTemplates.artifactPathTemplate.match(artifactName).artifact;
    }
    /**
     * Return a fully-qualified batchPredictionJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} batch_prediction_job
     * @returns {string} Resource name string.
     */
    batchPredictionJobPath(project, location, batchPredictionJob) {
        return this.pathTemplates.batchPredictionJobPathTemplate.render({
            project: project,
            location: location,
            batch_prediction_job: batchPredictionJob,
        });
    }
    /**
     * Parse the project from BatchPredictionJob resource.
     *
     * @param {string} batchPredictionJobName
     *   A fully-qualified path representing BatchPredictionJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBatchPredictionJobName(batchPredictionJobName) {
        return this.pathTemplates.batchPredictionJobPathTemplate.match(batchPredictionJobName).project;
    }
    /**
     * Parse the location from BatchPredictionJob resource.
     *
     * @param {string} batchPredictionJobName
     *   A fully-qualified path representing BatchPredictionJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBatchPredictionJobName(batchPredictionJobName) {
        return this.pathTemplates.batchPredictionJobPathTemplate.match(batchPredictionJobName).location;
    }
    /**
     * Parse the batch_prediction_job from BatchPredictionJob resource.
     *
     * @param {string} batchPredictionJobName
     *   A fully-qualified path representing BatchPredictionJob resource.
     * @returns {string} A string representing the batch_prediction_job.
     */
    matchBatchPredictionJobFromBatchPredictionJobName(batchPredictionJobName) {
        return this.pathTemplates.batchPredictionJobPathTemplate.match(batchPredictionJobName).batch_prediction_job;
    }
    /**
     * Return a fully-qualified context resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} metadata_store
     * @param {string} context
     * @returns {string} Resource name string.
     */
    contextPath(project, location, metadataStore, context) {
        return this.pathTemplates.contextPathTemplate.render({
            project: project,
            location: location,
            metadata_store: metadataStore,
            context: context,
        });
    }
    /**
     * Parse the project from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromContextName(contextName) {
        return this.pathTemplates.contextPathTemplate.match(contextName).project;
    }
    /**
     * Parse the location from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromContextName(contextName) {
        return this.pathTemplates.contextPathTemplate.match(contextName).location;
    }
    /**
     * Parse the metadata_store from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the metadata_store.
     */
    matchMetadataStoreFromContextName(contextName) {
        return this.pathTemplates.contextPathTemplate.match(contextName)
            .metadata_store;
    }
    /**
     * Parse the context from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the context.
     */
    matchContextFromContextName(contextName) {
        return this.pathTemplates.contextPathTemplate.match(contextName).context;
    }
    /**
     * Return a fully-qualified customJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} custom_job
     * @returns {string} Resource name string.
     */
    customJobPath(project, location, customJob) {
        return this.pathTemplates.customJobPathTemplate.render({
            project: project,
            location: location,
            custom_job: customJob,
        });
    }
    /**
     * Parse the project from CustomJob resource.
     *
     * @param {string} customJobName
     *   A fully-qualified path representing CustomJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCustomJobName(customJobName) {
        return this.pathTemplates.customJobPathTemplate.match(customJobName)
            .project;
    }
    /**
     * Parse the location from CustomJob resource.
     *
     * @param {string} customJobName
     *   A fully-qualified path representing CustomJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCustomJobName(customJobName) {
        return this.pathTemplates.customJobPathTemplate.match(customJobName)
            .location;
    }
    /**
     * Parse the custom_job from CustomJob resource.
     *
     * @param {string} customJobName
     *   A fully-qualified path representing CustomJob resource.
     * @returns {string} A string representing the custom_job.
     */
    matchCustomJobFromCustomJobName(customJobName) {
        return this.pathTemplates.customJobPathTemplate.match(customJobName)
            .custom_job;
    }
    /**
     * Return a fully-qualified dataItem resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} data_item
     * @returns {string} Resource name string.
     */
    dataItemPath(project, location, dataset, dataItem) {
        return this.pathTemplates.dataItemPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
            data_item: dataItem,
        });
    }
    /**
     * Parse the project from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataItemName(dataItemName) {
        return this.pathTemplates.dataItemPathTemplate.match(dataItemName).project;
    }
    /**
     * Parse the location from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataItemName(dataItemName) {
        return this.pathTemplates.dataItemPathTemplate.match(dataItemName).location;
    }
    /**
     * Parse the dataset from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromDataItemName(dataItemName) {
        return this.pathTemplates.dataItemPathTemplate.match(dataItemName).dataset;
    }
    /**
     * Parse the data_item from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the data_item.
     */
    matchDataItemFromDataItemName(dataItemName) {
        return this.pathTemplates.dataItemPathTemplate.match(dataItemName)
            .data_item;
    }
    /**
     * Return a fully-qualified dataLabelingJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_labeling_job
     * @returns {string} Resource name string.
     */
    dataLabelingJobPath(project, location, dataLabelingJob) {
        return this.pathTemplates.dataLabelingJobPathTemplate.render({
            project: project,
            location: location,
            data_labeling_job: dataLabelingJob,
        });
    }
    /**
     * Parse the project from DataLabelingJob resource.
     *
     * @param {string} dataLabelingJobName
     *   A fully-qualified path representing DataLabelingJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataLabelingJobName(dataLabelingJobName) {
        return this.pathTemplates.dataLabelingJobPathTemplate.match(dataLabelingJobName).project;
    }
    /**
     * Parse the location from DataLabelingJob resource.
     *
     * @param {string} dataLabelingJobName
     *   A fully-qualified path representing DataLabelingJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataLabelingJobName(dataLabelingJobName) {
        return this.pathTemplates.dataLabelingJobPathTemplate.match(dataLabelingJobName).location;
    }
    /**
     * Parse the data_labeling_job from DataLabelingJob resource.
     *
     * @param {string} dataLabelingJobName
     *   A fully-qualified path representing DataLabelingJob resource.
     * @returns {string} A string representing the data_labeling_job.
     */
    matchDataLabelingJobFromDataLabelingJobName(dataLabelingJobName) {
        return this.pathTemplates.dataLabelingJobPathTemplate.match(dataLabelingJobName).data_labeling_job;
    }
    /**
     * Return a fully-qualified dataset resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @returns {string} Resource name string.
     */
    datasetPath(project, location, dataset) {
        return this.pathTemplates.datasetPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
        });
    }
    /**
     * Parse the project from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDatasetName(datasetName) {
        return this.pathTemplates.datasetPathTemplate.match(datasetName).project;
    }
    /**
     * Parse the location from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDatasetName(datasetName) {
        return this.pathTemplates.datasetPathTemplate.match(datasetName).location;
    }
    /**
     * Parse the dataset from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromDatasetName(datasetName) {
        return this.pathTemplates.datasetPathTemplate.match(datasetName).dataset;
    }
    /**
     * Return a fully-qualified endpoint resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} endpoint
     * @returns {string} Resource name string.
     */
    endpointPath(project, location, endpoint) {
        return this.pathTemplates.endpointPathTemplate.render({
            project: project,
            location: location,
            endpoint: endpoint,
        });
    }
    /**
     * Parse the project from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEndpointName(endpointName) {
        return this.pathTemplates.endpointPathTemplate.match(endpointName).project;
    }
    /**
     * Parse the location from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEndpointName(endpointName) {
        return this.pathTemplates.endpointPathTemplate.match(endpointName).location;
    }
    /**
     * Parse the endpoint from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the endpoint.
     */
    matchEndpointFromEndpointName(endpointName) {
        return this.pathTemplates.endpointPathTemplate.match(endpointName).endpoint;
    }
    /**
     * Return a fully-qualified execution resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} metadata_store
     * @param {string} execution
     * @returns {string} Resource name string.
     */
    executionPath(project, location, metadataStore, execution) {
        return this.pathTemplates.executionPathTemplate.render({
            project: project,
            location: location,
            metadata_store: metadataStore,
            execution: execution,
        });
    }
    /**
     * Parse the project from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromExecutionName(executionName) {
        return this.pathTemplates.executionPathTemplate.match(executionName)
            .project;
    }
    /**
     * Parse the location from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromExecutionName(executionName) {
        return this.pathTemplates.executionPathTemplate.match(executionName)
            .location;
    }
    /**
     * Parse the metadata_store from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the metadata_store.
     */
    matchMetadataStoreFromExecutionName(executionName) {
        return this.pathTemplates.executionPathTemplate.match(executionName)
            .metadata_store;
    }
    /**
     * Parse the execution from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the execution.
     */
    matchExecutionFromExecutionName(executionName) {
        return this.pathTemplates.executionPathTemplate.match(executionName)
            .execution;
    }
    /**
     * Return a fully-qualified hyperparameterTuningJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} hyperparameter_tuning_job
     * @returns {string} Resource name string.
     */
    hyperparameterTuningJobPath(project, location, hyperparameterTuningJob) {
        return this.pathTemplates.hyperparameterTuningJobPathTemplate.render({
            project: project,
            location: location,
            hyperparameter_tuning_job: hyperparameterTuningJob,
        });
    }
    /**
     * Parse the project from HyperparameterTuningJob resource.
     *
     * @param {string} hyperparameterTuningJobName
     *   A fully-qualified path representing HyperparameterTuningJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromHyperparameterTuningJobName(hyperparameterTuningJobName) {
        return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(hyperparameterTuningJobName).project;
    }
    /**
     * Parse the location from HyperparameterTuningJob resource.
     *
     * @param {string} hyperparameterTuningJobName
     *   A fully-qualified path representing HyperparameterTuningJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromHyperparameterTuningJobName(hyperparameterTuningJobName) {
        return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(hyperparameterTuningJobName).location;
    }
    /**
     * Parse the hyperparameter_tuning_job from HyperparameterTuningJob resource.
     *
     * @param {string} hyperparameterTuningJobName
     *   A fully-qualified path representing HyperparameterTuningJob resource.
     * @returns {string} A string representing the hyperparameter_tuning_job.
     */
    matchHyperparameterTuningJobFromHyperparameterTuningJobName(hyperparameterTuningJobName) {
        return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(hyperparameterTuningJobName).hyperparameter_tuning_job;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified model resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model
     * @returns {string} Resource name string.
     */
    modelPath(project, location, model) {
        return this.pathTemplates.modelPathTemplate.render({
            project: project,
            location: location,
            model: model,
        });
    }
    /**
     * Parse the project from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).project;
    }
    /**
     * Parse the location from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).location;
    }
    /**
     * Parse the model from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).model;
    }
    /**
     * Return a fully-qualified modelEvaluation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model
     * @param {string} evaluation
     * @returns {string} Resource name string.
     */
    modelEvaluationPath(project, location, model, evaluation) {
        return this.pathTemplates.modelEvaluationPathTemplate.render({
            project: project,
            location: location,
            model: model,
            evaluation: evaluation,
        });
    }
    /**
     * Parse the project from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).project;
    }
    /**
     * Parse the location from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).location;
    }
    /**
     * Parse the model from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).model;
    }
    /**
     * Parse the evaluation from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the evaluation.
     */
    matchEvaluationFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).evaluation;
    }
    /**
     * Return a fully-qualified modelEvaluationSlice resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model
     * @param {string} evaluation
     * @param {string} slice
     * @returns {string} Resource name string.
     */
    modelEvaluationSlicePath(project, location, model, evaluation, slice) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.render({
            project: project,
            location: location,
            model: model,
            evaluation: evaluation,
            slice: slice,
        });
    }
    /**
     * Parse the project from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelEvaluationSliceName(modelEvaluationSliceName) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.match(modelEvaluationSliceName).project;
    }
    /**
     * Parse the location from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelEvaluationSliceName(modelEvaluationSliceName) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.match(modelEvaluationSliceName).location;
    }
    /**
     * Parse the model from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelEvaluationSliceName(modelEvaluationSliceName) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.match(modelEvaluationSliceName).model;
    }
    /**
     * Parse the evaluation from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the evaluation.
     */
    matchEvaluationFromModelEvaluationSliceName(modelEvaluationSliceName) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.match(modelEvaluationSliceName).evaluation;
    }
    /**
     * Parse the slice from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the slice.
     */
    matchSliceFromModelEvaluationSliceName(modelEvaluationSliceName) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.match(modelEvaluationSliceName).slice;
    }
    /**
     * Return a fully-qualified pipelineJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} pipeline_job
     * @returns {string} Resource name string.
     */
    pipelineJobPath(project, location, pipelineJob) {
        return this.pathTemplates.pipelineJobPathTemplate.render({
            project: project,
            location: location,
            pipeline_job: pipelineJob,
        });
    }
    /**
     * Parse the project from PipelineJob resource.
     *
     * @param {string} pipelineJobName
     *   A fully-qualified path representing PipelineJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPipelineJobName(pipelineJobName) {
        return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
            .project;
    }
    /**
     * Parse the location from PipelineJob resource.
     *
     * @param {string} pipelineJobName
     *   A fully-qualified path representing PipelineJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPipelineJobName(pipelineJobName) {
        return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
            .location;
    }
    /**
     * Parse the pipeline_job from PipelineJob resource.
     *
     * @param {string} pipelineJobName
     *   A fully-qualified path representing PipelineJob resource.
     * @returns {string} A string representing the pipeline_job.
     */
    matchPipelineJobFromPipelineJobName(pipelineJobName) {
        return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
            .pipeline_job;
    }
    /**
     * Return a fully-qualified specialistPool resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} specialist_pool
     * @returns {string} Resource name string.
     */
    specialistPoolPath(project, location, specialistPool) {
        return this.pathTemplates.specialistPoolPathTemplate.render({
            project: project,
            location: location,
            specialist_pool: specialistPool,
        });
    }
    /**
     * Parse the project from SpecialistPool resource.
     *
     * @param {string} specialistPoolName
     *   A fully-qualified path representing SpecialistPool resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSpecialistPoolName(specialistPoolName) {
        return this.pathTemplates.specialistPoolPathTemplate.match(specialistPoolName).project;
    }
    /**
     * Parse the location from SpecialistPool resource.
     *
     * @param {string} specialistPoolName
     *   A fully-qualified path representing SpecialistPool resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSpecialistPoolName(specialistPoolName) {
        return this.pathTemplates.specialistPoolPathTemplate.match(specialistPoolName).location;
    }
    /**
     * Parse the specialist_pool from SpecialistPool resource.
     *
     * @param {string} specialistPoolName
     *   A fully-qualified path representing SpecialistPool resource.
     * @returns {string} A string representing the specialist_pool.
     */
    matchSpecialistPoolFromSpecialistPoolName(specialistPoolName) {
        return this.pathTemplates.specialistPoolPathTemplate.match(specialistPoolName).specialist_pool;
    }
    /**
     * Return a fully-qualified trainingPipeline resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} training_pipeline
     * @returns {string} Resource name string.
     */
    trainingPipelinePath(project, location, trainingPipeline) {
        return this.pathTemplates.trainingPipelinePathTemplate.render({
            project: project,
            location: location,
            training_pipeline: trainingPipeline,
        });
    }
    /**
     * Parse the project from TrainingPipeline resource.
     *
     * @param {string} trainingPipelineName
     *   A fully-qualified path representing TrainingPipeline resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTrainingPipelineName(trainingPipelineName) {
        return this.pathTemplates.trainingPipelinePathTemplate.match(trainingPipelineName).project;
    }
    /**
     * Parse the location from TrainingPipeline resource.
     *
     * @param {string} trainingPipelineName
     *   A fully-qualified path representing TrainingPipeline resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTrainingPipelineName(trainingPipelineName) {
        return this.pathTemplates.trainingPipelinePathTemplate.match(trainingPipelineName).location;
    }
    /**
     * Parse the training_pipeline from TrainingPipeline resource.
     *
     * @param {string} trainingPipelineName
     *   A fully-qualified path representing TrainingPipeline resource.
     * @returns {string} A string representing the training_pipeline.
     */
    matchTrainingPipelineFromTrainingPipelineName(trainingPipelineName) {
        return this.pathTemplates.trainingPipelinePathTemplate.match(trainingPipelineName).training_pipeline;
    }
    /**
     * Return a fully-qualified trial resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} study
     * @param {string} trial
     * @returns {string} Resource name string.
     */
    trialPath(project, location, study, trial) {
        return this.pathTemplates.trialPathTemplate.render({
            project: project,
            location: location,
            study: study,
            trial: trial,
        });
    }
    /**
     * Parse the project from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTrialName(trialName) {
        return this.pathTemplates.trialPathTemplate.match(trialName).project;
    }
    /**
     * Parse the location from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTrialName(trialName) {
        return this.pathTemplates.trialPathTemplate.match(trialName).location;
    }
    /**
     * Parse the study from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the study.
     */
    matchStudyFromTrialName(trialName) {
        return this.pathTemplates.trialPathTemplate.match(trialName).study;
    }
    /**
     * Parse the trial from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the trial.
     */
    matchTrialFromTrialName(trialName) {
        return this.pathTemplates.trialPathTemplate.match(trialName).trial;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        this.initialize();
        if (!this._terminated) {
            return this.endpointServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.EndpointServiceClient = EndpointServiceClient;
//# sourceMappingURL=endpoint_service_client.js.map