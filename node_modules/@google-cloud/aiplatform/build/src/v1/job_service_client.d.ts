/// <reference types="node" />
import * as gax from 'google-gax';
import { Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback } from 'google-gax';
import { Transform } from 'stream';
import * as protos from '../../protos/protos';
/**
 *  A service for creating and managing Vertex AI's jobs.
 * @class
 * @memberof v1
 */
export declare class JobServiceClient {
    private _terminated;
    private _opts;
    private _providedCustomServicePath;
    private _gaxModule;
    private _gaxGrpc;
    private _protos;
    private _defaults;
    auth: gax.GoogleAuth;
    descriptors: Descriptors;
    warn: (code: string, message: string, warnType?: string) => void;
    innerApiCalls: {
        [name: string]: Function;
    };
    pathTemplates: {
        [name: string]: gax.PathTemplate;
    };
    operationsClient: gax.OperationsClient;
    jobServiceStub?: Promise<{
        [name: string]: Function;
    }>;
    /**
     * Construct an instance of JobServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts?: ClientOptions);
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize(): Promise<{
        [name: string]: Function;
    }>;
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath(): string;
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint(): string;
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port(): number;
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes(): string[];
    getProjectId(): Promise<string>;
    getProjectId(callback: Callback<string, undefined, undefined>): void;
    createCustomJob(request?: protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.ICustomJob,
        protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest | undefined,
        {} | undefined
    ]>;
    createCustomJob(request: protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.aiplatform.v1.ICustomJob, protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest | null | undefined, {} | null | undefined>): void;
    createCustomJob(request: protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest, callback: Callback<protos.google.cloud.aiplatform.v1.ICustomJob, protos.google.cloud.aiplatform.v1.ICreateCustomJobRequest | null | undefined, {} | null | undefined>): void;
    getCustomJob(request?: protos.google.cloud.aiplatform.v1.IGetCustomJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.ICustomJob,
        protos.google.cloud.aiplatform.v1.IGetCustomJobRequest | undefined,
        {} | undefined
    ]>;
    getCustomJob(request: protos.google.cloud.aiplatform.v1.IGetCustomJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.aiplatform.v1.ICustomJob, protos.google.cloud.aiplatform.v1.IGetCustomJobRequest | null | undefined, {} | null | undefined>): void;
    getCustomJob(request: protos.google.cloud.aiplatform.v1.IGetCustomJobRequest, callback: Callback<protos.google.cloud.aiplatform.v1.ICustomJob, protos.google.cloud.aiplatform.v1.IGetCustomJobRequest | null | undefined, {} | null | undefined>): void;
    cancelCustomJob(request?: protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest | undefined,
        {} | undefined
    ]>;
    cancelCustomJob(request: protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest | null | undefined, {} | null | undefined>): void;
    cancelCustomJob(request: protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.ICancelCustomJobRequest | null | undefined, {} | null | undefined>): void;
    createDataLabelingJob(request?: protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.IDataLabelingJob,
        (protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest | undefined),
        {} | undefined
    ]>;
    createDataLabelingJob(request: protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.aiplatform.v1.IDataLabelingJob, protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest | null | undefined, {} | null | undefined>): void;
    createDataLabelingJob(request: protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest, callback: Callback<protos.google.cloud.aiplatform.v1.IDataLabelingJob, protos.google.cloud.aiplatform.v1.ICreateDataLabelingJobRequest | null | undefined, {} | null | undefined>): void;
    getDataLabelingJob(request?: protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.IDataLabelingJob,
        protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest | undefined,
        {} | undefined
    ]>;
    getDataLabelingJob(request: protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.aiplatform.v1.IDataLabelingJob, protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest | null | undefined, {} | null | undefined>): void;
    getDataLabelingJob(request: protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest, callback: Callback<protos.google.cloud.aiplatform.v1.IDataLabelingJob, protos.google.cloud.aiplatform.v1.IGetDataLabelingJobRequest | null | undefined, {} | null | undefined>): void;
    cancelDataLabelingJob(request?: protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest | undefined),
        {} | undefined
    ]>;
    cancelDataLabelingJob(request: protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest | null | undefined, {} | null | undefined>): void;
    cancelDataLabelingJob(request: protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.ICancelDataLabelingJobRequest | null | undefined, {} | null | undefined>): void;
    createHyperparameterTuningJob(request?: protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
        (protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest | undefined),
        {} | undefined
    ]>;
    createHyperparameterTuningJob(request: protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob, protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest | null | undefined, {} | null | undefined>): void;
    createHyperparameterTuningJob(request: protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest, callback: Callback<protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob, protos.google.cloud.aiplatform.v1.ICreateHyperparameterTuningJobRequest | null | undefined, {} | null | undefined>): void;
    getHyperparameterTuningJob(request?: protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob,
        (protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest | undefined),
        {} | undefined
    ]>;
    getHyperparameterTuningJob(request: protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob, protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest | null | undefined, {} | null | undefined>): void;
    getHyperparameterTuningJob(request: protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest, callback: Callback<protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob, protos.google.cloud.aiplatform.v1.IGetHyperparameterTuningJobRequest | null | undefined, {} | null | undefined>): void;
    cancelHyperparameterTuningJob(request?: protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest | undefined),
        {} | undefined
    ]>;
    cancelHyperparameterTuningJob(request: protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest | null | undefined, {} | null | undefined>): void;
    cancelHyperparameterTuningJob(request: protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.ICancelHyperparameterTuningJobRequest | null | undefined, {} | null | undefined>): void;
    createBatchPredictionJob(request?: protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
        (protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest | undefined),
        {} | undefined
    ]>;
    createBatchPredictionJob(request: protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.aiplatform.v1.IBatchPredictionJob, protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest | null | undefined, {} | null | undefined>): void;
    createBatchPredictionJob(request: protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest, callback: Callback<protos.google.cloud.aiplatform.v1.IBatchPredictionJob, protos.google.cloud.aiplatform.v1.ICreateBatchPredictionJobRequest | null | undefined, {} | null | undefined>): void;
    getBatchPredictionJob(request?: protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob,
        (protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest | undefined),
        {} | undefined
    ]>;
    getBatchPredictionJob(request: protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest, options: CallOptions, callback: Callback<protos.google.cloud.aiplatform.v1.IBatchPredictionJob, protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest | null | undefined, {} | null | undefined>): void;
    getBatchPredictionJob(request: protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest, callback: Callback<protos.google.cloud.aiplatform.v1.IBatchPredictionJob, protos.google.cloud.aiplatform.v1.IGetBatchPredictionJobRequest | null | undefined, {} | null | undefined>): void;
    cancelBatchPredictionJob(request?: protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest, options?: CallOptions): Promise<[
        protos.google.protobuf.IEmpty,
        (protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest | undefined),
        {} | undefined
    ]>;
    cancelBatchPredictionJob(request: protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest, options: CallOptions, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest | null | undefined, {} | null | undefined>): void;
    cancelBatchPredictionJob(request: protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest, callback: Callback<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.ICancelBatchPredictionJobRequest | null | undefined, {} | null | undefined>): void;
    deleteCustomJob(request?: protos.google.cloud.aiplatform.v1.IDeleteCustomJobRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteCustomJob(request: protos.google.cloud.aiplatform.v1.IDeleteCustomJobRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteCustomJob(request: protos.google.cloud.aiplatform.v1.IDeleteCustomJobRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteCustomJob()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkDeleteCustomJobProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkDeleteCustomJobProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>>;
    deleteDataLabelingJob(request?: protos.google.cloud.aiplatform.v1.IDeleteDataLabelingJobRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteDataLabelingJob(request: protos.google.cloud.aiplatform.v1.IDeleteDataLabelingJobRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteDataLabelingJob(request: protos.google.cloud.aiplatform.v1.IDeleteDataLabelingJobRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteDataLabelingJob()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkDeleteDataLabelingJobProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkDeleteDataLabelingJobProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>>;
    deleteHyperparameterTuningJob(request?: protos.google.cloud.aiplatform.v1.IDeleteHyperparameterTuningJobRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteHyperparameterTuningJob(request: protos.google.cloud.aiplatform.v1.IDeleteHyperparameterTuningJobRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteHyperparameterTuningJob(request: protos.google.cloud.aiplatform.v1.IDeleteHyperparameterTuningJobRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteHyperparameterTuningJob()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkDeleteHyperparameterTuningJobProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkDeleteHyperparameterTuningJobProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>>;
    deleteBatchPredictionJob(request?: protos.google.cloud.aiplatform.v1.IDeleteBatchPredictionJobRequest, options?: CallOptions): Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>,
        protos.google.longrunning.IOperation | undefined,
        {} | undefined
    ]>;
    deleteBatchPredictionJob(request: protos.google.cloud.aiplatform.v1.IDeleteBatchPredictionJobRequest, options: CallOptions, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    deleteBatchPredictionJob(request: protos.google.cloud.aiplatform.v1.IDeleteBatchPredictionJobRequest, callback: Callback<LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.aiplatform.v1.IDeleteOperationMetadata>, protos.google.longrunning.IOperation | null | undefined, {} | null | undefined>): void;
    /**
     * Check the status of the long running operation returned by `deleteBatchPredictionJob()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkDeleteBatchPredictionJobProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    checkDeleteBatchPredictionJobProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.aiplatform.v1.DeleteOperationMetadata>>;
    listCustomJobs(request?: protos.google.cloud.aiplatform.v1.IListCustomJobsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.ICustomJob[],
        protos.google.cloud.aiplatform.v1.IListCustomJobsRequest | null,
        protos.google.cloud.aiplatform.v1.IListCustomJobsResponse
    ]>;
    listCustomJobs(request: protos.google.cloud.aiplatform.v1.IListCustomJobsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.aiplatform.v1.IListCustomJobsRequest, protos.google.cloud.aiplatform.v1.IListCustomJobsResponse | null | undefined, protos.google.cloud.aiplatform.v1.ICustomJob>): void;
    listCustomJobs(request: protos.google.cloud.aiplatform.v1.IListCustomJobsRequest, callback: PaginationCallback<protos.google.cloud.aiplatform.v1.IListCustomJobsRequest, protos.google.cloud.aiplatform.v1.IListCustomJobsResponse | null | undefined, protos.google.cloud.aiplatform.v1.ICustomJob>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location to list the CustomJobs from.
     *   Format: `projects/{project}/locations/{location}`
     * @param {string} request.filter
     *   The standard list filter.
     *
     *   Supported fields:
     *
     *     * `display_name` supports = and !=.
     *
     *     * `state` supports = and !=.
     *
     *   Some examples of using the filter are:
     *
     *    * `state="JOB_STATE_SUCCEEDED" AND display_name="my_job"`
     *
     *    * `state="JOB_STATE_RUNNING" OR display_name="my_job"`
     *
     *    * `NOT display_name="my_job"`
     *
     *    * `state="JOB_STATE_FAILED"`
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     *   Typically obtained via
     *   {@link google.cloud.aiplatform.v1.ListCustomJobsResponse.next_page_token|ListCustomJobsResponse.next_page_token} of the previous
     *   {@link google.cloud.aiplatform.v1.JobService.ListCustomJobs|JobService.ListCustomJobs} call.
     * @param {google.protobuf.FieldMask} request.readMask
     *   Mask specifying which fields to read.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [CustomJob]{@link google.cloud.aiplatform.v1.CustomJob} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listCustomJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listCustomJobsStream(request?: protos.google.cloud.aiplatform.v1.IListCustomJobsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listCustomJobs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location to list the CustomJobs from.
     *   Format: `projects/{project}/locations/{location}`
     * @param {string} request.filter
     *   The standard list filter.
     *
     *   Supported fields:
     *
     *     * `display_name` supports = and !=.
     *
     *     * `state` supports = and !=.
     *
     *   Some examples of using the filter are:
     *
     *    * `state="JOB_STATE_SUCCEEDED" AND display_name="my_job"`
     *
     *    * `state="JOB_STATE_RUNNING" OR display_name="my_job"`
     *
     *    * `NOT display_name="my_job"`
     *
     *    * `state="JOB_STATE_FAILED"`
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     *   Typically obtained via
     *   {@link google.cloud.aiplatform.v1.ListCustomJobsResponse.next_page_token|ListCustomJobsResponse.next_page_token} of the previous
     *   {@link google.cloud.aiplatform.v1.JobService.ListCustomJobs|JobService.ListCustomJobs} call.
     * @param {google.protobuf.FieldMask} request.readMask
     *   Mask specifying which fields to read.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [CustomJob]{@link google.cloud.aiplatform.v1.CustomJob}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listCustomJobsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listCustomJobsAsync(request?: protos.google.cloud.aiplatform.v1.IListCustomJobsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.aiplatform.v1.ICustomJob>;
    listDataLabelingJobs(request?: protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.IDataLabelingJob[],
        protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest | null,
        protos.google.cloud.aiplatform.v1.IListDataLabelingJobsResponse
    ]>;
    listDataLabelingJobs(request: protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest, protos.google.cloud.aiplatform.v1.IListDataLabelingJobsResponse | null | undefined, protos.google.cloud.aiplatform.v1.IDataLabelingJob>): void;
    listDataLabelingJobs(request: protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest, callback: PaginationCallback<protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest, protos.google.cloud.aiplatform.v1.IListDataLabelingJobsResponse | null | undefined, protos.google.cloud.aiplatform.v1.IDataLabelingJob>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent of the DataLabelingJob.
     *   Format: `projects/{project}/locations/{location}`
     * @param {string} request.filter
     *   The standard list filter.
     *
     *   Supported fields:
     *
     *     * `display_name` supports = and !=.
     *
     *     * `state` supports = and !=.
     *
     *   Some examples of using the filter are:
     *
     *    * `state="JOB_STATE_SUCCEEDED" AND display_name="my_job"`
     *
     *    * `state="JOB_STATE_RUNNING" OR display_name="my_job"`
     *
     *    * `NOT display_name="my_job"`
     *
     *    * `state="JOB_STATE_FAILED"`
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {google.protobuf.FieldMask} request.readMask
     *   Mask specifying which fields to read. FieldMask represents a set of
     *   symbolic field paths. For example, the mask can be `paths: "name"`. The
     *   "name" here is a field in DataLabelingJob.
     *   If this field is not set, all fields of the DataLabelingJob are returned.
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order by
     *   default.
     *   Use `desc` after a field name for descending.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [DataLabelingJob]{@link google.cloud.aiplatform.v1.DataLabelingJob} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listDataLabelingJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listDataLabelingJobsStream(request?: protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listDataLabelingJobs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The parent of the DataLabelingJob.
     *   Format: `projects/{project}/locations/{location}`
     * @param {string} request.filter
     *   The standard list filter.
     *
     *   Supported fields:
     *
     *     * `display_name` supports = and !=.
     *
     *     * `state` supports = and !=.
     *
     *   Some examples of using the filter are:
     *
     *    * `state="JOB_STATE_SUCCEEDED" AND display_name="my_job"`
     *
     *    * `state="JOB_STATE_RUNNING" OR display_name="my_job"`
     *
     *    * `NOT display_name="my_job"`
     *
     *    * `state="JOB_STATE_FAILED"`
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     * @param {google.protobuf.FieldMask} request.readMask
     *   Mask specifying which fields to read. FieldMask represents a set of
     *   symbolic field paths. For example, the mask can be `paths: "name"`. The
     *   "name" here is a field in DataLabelingJob.
     *   If this field is not set, all fields of the DataLabelingJob are returned.
     * @param {string} request.orderBy
     *   A comma-separated list of fields to order by, sorted in ascending order by
     *   default.
     *   Use `desc` after a field name for descending.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [DataLabelingJob]{@link google.cloud.aiplatform.v1.DataLabelingJob}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listDataLabelingJobsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listDataLabelingJobsAsync(request?: protos.google.cloud.aiplatform.v1.IListDataLabelingJobsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.aiplatform.v1.IDataLabelingJob>;
    listHyperparameterTuningJobs(request?: protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob[],
        protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest | null,
        protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsResponse
    ]>;
    listHyperparameterTuningJobs(request: protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest, protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsResponse | null | undefined, protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob>): void;
    listHyperparameterTuningJobs(request: protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest, callback: PaginationCallback<protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest, protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsResponse | null | undefined, protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location to list the HyperparameterTuningJobs
     *   from. Format: `projects/{project}/locations/{location}`
     * @param {string} request.filter
     *   The standard list filter.
     *
     *   Supported fields:
     *
     *     * `display_name` supports = and !=.
     *
     *     * `state` supports = and !=.
     *
     *   Some examples of using the filter are:
     *
     *    * `state="JOB_STATE_SUCCEEDED" AND display_name="my_job"`
     *
     *    * `state="JOB_STATE_RUNNING" OR display_name="my_job"`
     *
     *    * `NOT display_name="my_job"`
     *
     *    * `state="JOB_STATE_FAILED"`
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     *   Typically obtained via
     *   {@link google.cloud.aiplatform.v1.ListHyperparameterTuningJobsResponse.next_page_token|ListHyperparameterTuningJobsResponse.next_page_token} of the previous
     *   {@link google.cloud.aiplatform.v1.JobService.ListHyperparameterTuningJobs|JobService.ListHyperparameterTuningJobs} call.
     * @param {google.protobuf.FieldMask} request.readMask
     *   Mask specifying which fields to read.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [HyperparameterTuningJob]{@link google.cloud.aiplatform.v1.HyperparameterTuningJob} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listHyperparameterTuningJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listHyperparameterTuningJobsStream(request?: protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listHyperparameterTuningJobs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location to list the HyperparameterTuningJobs
     *   from. Format: `projects/{project}/locations/{location}`
     * @param {string} request.filter
     *   The standard list filter.
     *
     *   Supported fields:
     *
     *     * `display_name` supports = and !=.
     *
     *     * `state` supports = and !=.
     *
     *   Some examples of using the filter are:
     *
     *    * `state="JOB_STATE_SUCCEEDED" AND display_name="my_job"`
     *
     *    * `state="JOB_STATE_RUNNING" OR display_name="my_job"`
     *
     *    * `NOT display_name="my_job"`
     *
     *    * `state="JOB_STATE_FAILED"`
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     *   Typically obtained via
     *   {@link google.cloud.aiplatform.v1.ListHyperparameterTuningJobsResponse.next_page_token|ListHyperparameterTuningJobsResponse.next_page_token} of the previous
     *   {@link google.cloud.aiplatform.v1.JobService.ListHyperparameterTuningJobs|JobService.ListHyperparameterTuningJobs} call.
     * @param {google.protobuf.FieldMask} request.readMask
     *   Mask specifying which fields to read.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [HyperparameterTuningJob]{@link google.cloud.aiplatform.v1.HyperparameterTuningJob}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listHyperparameterTuningJobsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listHyperparameterTuningJobsAsync(request?: protos.google.cloud.aiplatform.v1.IListHyperparameterTuningJobsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.aiplatform.v1.IHyperparameterTuningJob>;
    listBatchPredictionJobs(request?: protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest, options?: CallOptions): Promise<[
        protos.google.cloud.aiplatform.v1.IBatchPredictionJob[],
        protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest | null,
        protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsResponse
    ]>;
    listBatchPredictionJobs(request: protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest, options: CallOptions, callback: PaginationCallback<protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest, protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsResponse | null | undefined, protos.google.cloud.aiplatform.v1.IBatchPredictionJob>): void;
    listBatchPredictionJobs(request: protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest, callback: PaginationCallback<protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest, protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsResponse | null | undefined, protos.google.cloud.aiplatform.v1.IBatchPredictionJob>): void;
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location to list the BatchPredictionJobs
     *   from. Format: `projects/{project}/locations/{location}`
     * @param {string} request.filter
     *   The standard list filter.
     *
     *   Supported fields:
     *
     *     * `display_name` supports = and !=.
     *
     *     * `state` supports = and !=.
     *
     *     * `model_display_name` supports = and !=
     *
     *   Some examples of using the filter are:
     *
     *    * `state="JOB_STATE_SUCCEEDED" AND display_name="my_job"`
     *
     *    * `state="JOB_STATE_RUNNING" OR display_name="my_job"`
     *
     *    * `NOT display_name="my_job"`
     *
     *    * `state="JOB_STATE_FAILED"`
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     *   Typically obtained via
     *   {@link google.cloud.aiplatform.v1.ListBatchPredictionJobsResponse.next_page_token|ListBatchPredictionJobsResponse.next_page_token} of the previous
     *   {@link google.cloud.aiplatform.v1.JobService.ListBatchPredictionJobs|JobService.ListBatchPredictionJobs} call.
     * @param {google.protobuf.FieldMask} request.readMask
     *   Mask specifying which fields to read.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [BatchPredictionJob]{@link google.cloud.aiplatform.v1.BatchPredictionJob} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBatchPredictionJobsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listBatchPredictionJobsStream(request?: protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest, options?: CallOptions): Transform;
    /**
     * Equivalent to `listBatchPredictionJobs`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location to list the BatchPredictionJobs
     *   from. Format: `projects/{project}/locations/{location}`
     * @param {string} request.filter
     *   The standard list filter.
     *
     *   Supported fields:
     *
     *     * `display_name` supports = and !=.
     *
     *     * `state` supports = and !=.
     *
     *     * `model_display_name` supports = and !=
     *
     *   Some examples of using the filter are:
     *
     *    * `state="JOB_STATE_SUCCEEDED" AND display_name="my_job"`
     *
     *    * `state="JOB_STATE_RUNNING" OR display_name="my_job"`
     *
     *    * `NOT display_name="my_job"`
     *
     *    * `state="JOB_STATE_FAILED"`
     * @param {number} request.pageSize
     *   The standard list page size.
     * @param {string} request.pageToken
     *   The standard list page token.
     *   Typically obtained via
     *   {@link google.cloud.aiplatform.v1.ListBatchPredictionJobsResponse.next_page_token|ListBatchPredictionJobsResponse.next_page_token} of the previous
     *   {@link google.cloud.aiplatform.v1.JobService.ListBatchPredictionJobs|JobService.ListBatchPredictionJobs} call.
     * @param {google.protobuf.FieldMask} request.readMask
     *   Mask specifying which fields to read.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [BatchPredictionJob]{@link google.cloud.aiplatform.v1.BatchPredictionJob}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listBatchPredictionJobsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listBatchPredictionJobsAsync(request?: protos.google.cloud.aiplatform.v1.IListBatchPredictionJobsRequest, options?: CallOptions): AsyncIterable<protos.google.cloud.aiplatform.v1.IBatchPredictionJob>;
    /**
     * Return a fully-qualified annotation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} data_item
     * @param {string} annotation
     * @returns {string} Resource name string.
     */
    annotationPath(project: string, location: string, dataset: string, dataItem: string, annotation: string): string;
    /**
     * Parse the project from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAnnotationName(annotationName: string): string | number;
    /**
     * Parse the location from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAnnotationName(annotationName: string): string | number;
    /**
     * Parse the dataset from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromAnnotationName(annotationName: string): string | number;
    /**
     * Parse the data_item from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the data_item.
     */
    matchDataItemFromAnnotationName(annotationName: string): string | number;
    /**
     * Parse the annotation from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the annotation.
     */
    matchAnnotationFromAnnotationName(annotationName: string): string | number;
    /**
     * Return a fully-qualified annotationSpec resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} annotation_spec
     * @returns {string} Resource name string.
     */
    annotationSpecPath(project: string, location: string, dataset: string, annotationSpec: string): string;
    /**
     * Parse the project from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAnnotationSpecName(annotationSpecName: string): string | number;
    /**
     * Parse the location from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAnnotationSpecName(annotationSpecName: string): string | number;
    /**
     * Parse the dataset from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromAnnotationSpecName(annotationSpecName: string): string | number;
    /**
     * Parse the annotation_spec from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the annotation_spec.
     */
    matchAnnotationSpecFromAnnotationSpecName(annotationSpecName: string): string | number;
    /**
     * Return a fully-qualified artifact resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} metadata_store
     * @param {string} artifact
     * @returns {string} Resource name string.
     */
    artifactPath(project: string, location: string, metadataStore: string, artifact: string): string;
    /**
     * Parse the project from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromArtifactName(artifactName: string): string | number;
    /**
     * Parse the location from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromArtifactName(artifactName: string): string | number;
    /**
     * Parse the metadata_store from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the metadata_store.
     */
    matchMetadataStoreFromArtifactName(artifactName: string): string | number;
    /**
     * Parse the artifact from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the artifact.
     */
    matchArtifactFromArtifactName(artifactName: string): string | number;
    /**
     * Return a fully-qualified batchPredictionJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} batch_prediction_job
     * @returns {string} Resource name string.
     */
    batchPredictionJobPath(project: string, location: string, batchPredictionJob: string): string;
    /**
     * Parse the project from BatchPredictionJob resource.
     *
     * @param {string} batchPredictionJobName
     *   A fully-qualified path representing BatchPredictionJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBatchPredictionJobName(batchPredictionJobName: string): string | number;
    /**
     * Parse the location from BatchPredictionJob resource.
     *
     * @param {string} batchPredictionJobName
     *   A fully-qualified path representing BatchPredictionJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBatchPredictionJobName(batchPredictionJobName: string): string | number;
    /**
     * Parse the batch_prediction_job from BatchPredictionJob resource.
     *
     * @param {string} batchPredictionJobName
     *   A fully-qualified path representing BatchPredictionJob resource.
     * @returns {string} A string representing the batch_prediction_job.
     */
    matchBatchPredictionJobFromBatchPredictionJobName(batchPredictionJobName: string): string | number;
    /**
     * Return a fully-qualified context resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} metadata_store
     * @param {string} context
     * @returns {string} Resource name string.
     */
    contextPath(project: string, location: string, metadataStore: string, context: string): string;
    /**
     * Parse the project from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromContextName(contextName: string): string | number;
    /**
     * Parse the location from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromContextName(contextName: string): string | number;
    /**
     * Parse the metadata_store from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the metadata_store.
     */
    matchMetadataStoreFromContextName(contextName: string): string | number;
    /**
     * Parse the context from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the context.
     */
    matchContextFromContextName(contextName: string): string | number;
    /**
     * Return a fully-qualified customJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} custom_job
     * @returns {string} Resource name string.
     */
    customJobPath(project: string, location: string, customJob: string): string;
    /**
     * Parse the project from CustomJob resource.
     *
     * @param {string} customJobName
     *   A fully-qualified path representing CustomJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCustomJobName(customJobName: string): string | number;
    /**
     * Parse the location from CustomJob resource.
     *
     * @param {string} customJobName
     *   A fully-qualified path representing CustomJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCustomJobName(customJobName: string): string | number;
    /**
     * Parse the custom_job from CustomJob resource.
     *
     * @param {string} customJobName
     *   A fully-qualified path representing CustomJob resource.
     * @returns {string} A string representing the custom_job.
     */
    matchCustomJobFromCustomJobName(customJobName: string): string | number;
    /**
     * Return a fully-qualified dataItem resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} data_item
     * @returns {string} Resource name string.
     */
    dataItemPath(project: string, location: string, dataset: string, dataItem: string): string;
    /**
     * Parse the project from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataItemName(dataItemName: string): string | number;
    /**
     * Parse the location from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataItemName(dataItemName: string): string | number;
    /**
     * Parse the dataset from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromDataItemName(dataItemName: string): string | number;
    /**
     * Parse the data_item from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the data_item.
     */
    matchDataItemFromDataItemName(dataItemName: string): string | number;
    /**
     * Return a fully-qualified dataLabelingJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_labeling_job
     * @returns {string} Resource name string.
     */
    dataLabelingJobPath(project: string, location: string, dataLabelingJob: string): string;
    /**
     * Parse the project from DataLabelingJob resource.
     *
     * @param {string} dataLabelingJobName
     *   A fully-qualified path representing DataLabelingJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataLabelingJobName(dataLabelingJobName: string): string | number;
    /**
     * Parse the location from DataLabelingJob resource.
     *
     * @param {string} dataLabelingJobName
     *   A fully-qualified path representing DataLabelingJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataLabelingJobName(dataLabelingJobName: string): string | number;
    /**
     * Parse the data_labeling_job from DataLabelingJob resource.
     *
     * @param {string} dataLabelingJobName
     *   A fully-qualified path representing DataLabelingJob resource.
     * @returns {string} A string representing the data_labeling_job.
     */
    matchDataLabelingJobFromDataLabelingJobName(dataLabelingJobName: string): string | number;
    /**
     * Return a fully-qualified dataset resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @returns {string} Resource name string.
     */
    datasetPath(project: string, location: string, dataset: string): string;
    /**
     * Parse the project from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDatasetName(datasetName: string): string | number;
    /**
     * Parse the location from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDatasetName(datasetName: string): string | number;
    /**
     * Parse the dataset from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromDatasetName(datasetName: string): string | number;
    /**
     * Return a fully-qualified endpoint resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} endpoint
     * @returns {string} Resource name string.
     */
    endpointPath(project: string, location: string, endpoint: string): string;
    /**
     * Parse the project from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEndpointName(endpointName: string): string | number;
    /**
     * Parse the location from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEndpointName(endpointName: string): string | number;
    /**
     * Parse the endpoint from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the endpoint.
     */
    matchEndpointFromEndpointName(endpointName: string): string | number;
    /**
     * Return a fully-qualified execution resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} metadata_store
     * @param {string} execution
     * @returns {string} Resource name string.
     */
    executionPath(project: string, location: string, metadataStore: string, execution: string): string;
    /**
     * Parse the project from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromExecutionName(executionName: string): string | number;
    /**
     * Parse the location from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromExecutionName(executionName: string): string | number;
    /**
     * Parse the metadata_store from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the metadata_store.
     */
    matchMetadataStoreFromExecutionName(executionName: string): string | number;
    /**
     * Parse the execution from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the execution.
     */
    matchExecutionFromExecutionName(executionName: string): string | number;
    /**
     * Return a fully-qualified hyperparameterTuningJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} hyperparameter_tuning_job
     * @returns {string} Resource name string.
     */
    hyperparameterTuningJobPath(project: string, location: string, hyperparameterTuningJob: string): string;
    /**
     * Parse the project from HyperparameterTuningJob resource.
     *
     * @param {string} hyperparameterTuningJobName
     *   A fully-qualified path representing HyperparameterTuningJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromHyperparameterTuningJobName(hyperparameterTuningJobName: string): string | number;
    /**
     * Parse the location from HyperparameterTuningJob resource.
     *
     * @param {string} hyperparameterTuningJobName
     *   A fully-qualified path representing HyperparameterTuningJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromHyperparameterTuningJobName(hyperparameterTuningJobName: string): string | number;
    /**
     * Parse the hyperparameter_tuning_job from HyperparameterTuningJob resource.
     *
     * @param {string} hyperparameterTuningJobName
     *   A fully-qualified path representing HyperparameterTuningJob resource.
     * @returns {string} A string representing the hyperparameter_tuning_job.
     */
    matchHyperparameterTuningJobFromHyperparameterTuningJobName(hyperparameterTuningJobName: string): string | number;
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project: string, location: string): string;
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName: string): string | number;
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName: string): string | number;
    /**
     * Return a fully-qualified model resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model
     * @returns {string} Resource name string.
     */
    modelPath(project: string, location: string, model: string): string;
    /**
     * Parse the project from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelName(modelName: string): string | number;
    /**
     * Parse the location from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelName(modelName: string): string | number;
    /**
     * Parse the model from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelName(modelName: string): string | number;
    /**
     * Return a fully-qualified modelEvaluation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model
     * @param {string} evaluation
     * @returns {string} Resource name string.
     */
    modelEvaluationPath(project: string, location: string, model: string, evaluation: string): string;
    /**
     * Parse the project from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelEvaluationName(modelEvaluationName: string): string | number;
    /**
     * Parse the location from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelEvaluationName(modelEvaluationName: string): string | number;
    /**
     * Parse the model from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelEvaluationName(modelEvaluationName: string): string | number;
    /**
     * Parse the evaluation from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the evaluation.
     */
    matchEvaluationFromModelEvaluationName(modelEvaluationName: string): string | number;
    /**
     * Return a fully-qualified modelEvaluationSlice resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model
     * @param {string} evaluation
     * @param {string} slice
     * @returns {string} Resource name string.
     */
    modelEvaluationSlicePath(project: string, location: string, model: string, evaluation: string, slice: string): string;
    /**
     * Parse the project from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelEvaluationSliceName(modelEvaluationSliceName: string): string | number;
    /**
     * Parse the location from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelEvaluationSliceName(modelEvaluationSliceName: string): string | number;
    /**
     * Parse the model from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelEvaluationSliceName(modelEvaluationSliceName: string): string | number;
    /**
     * Parse the evaluation from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the evaluation.
     */
    matchEvaluationFromModelEvaluationSliceName(modelEvaluationSliceName: string): string | number;
    /**
     * Parse the slice from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the slice.
     */
    matchSliceFromModelEvaluationSliceName(modelEvaluationSliceName: string): string | number;
    /**
     * Return a fully-qualified pipelineJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} pipeline_job
     * @returns {string} Resource name string.
     */
    pipelineJobPath(project: string, location: string, pipelineJob: string): string;
    /**
     * Parse the project from PipelineJob resource.
     *
     * @param {string} pipelineJobName
     *   A fully-qualified path representing PipelineJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPipelineJobName(pipelineJobName: string): string | number;
    /**
     * Parse the location from PipelineJob resource.
     *
     * @param {string} pipelineJobName
     *   A fully-qualified path representing PipelineJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPipelineJobName(pipelineJobName: string): string | number;
    /**
     * Parse the pipeline_job from PipelineJob resource.
     *
     * @param {string} pipelineJobName
     *   A fully-qualified path representing PipelineJob resource.
     * @returns {string} A string representing the pipeline_job.
     */
    matchPipelineJobFromPipelineJobName(pipelineJobName: string): string | number;
    /**
     * Return a fully-qualified specialistPool resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} specialist_pool
     * @returns {string} Resource name string.
     */
    specialistPoolPath(project: string, location: string, specialistPool: string): string;
    /**
     * Parse the project from SpecialistPool resource.
     *
     * @param {string} specialistPoolName
     *   A fully-qualified path representing SpecialistPool resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSpecialistPoolName(specialistPoolName: string): string | number;
    /**
     * Parse the location from SpecialistPool resource.
     *
     * @param {string} specialistPoolName
     *   A fully-qualified path representing SpecialistPool resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSpecialistPoolName(specialistPoolName: string): string | number;
    /**
     * Parse the specialist_pool from SpecialistPool resource.
     *
     * @param {string} specialistPoolName
     *   A fully-qualified path representing SpecialistPool resource.
     * @returns {string} A string representing the specialist_pool.
     */
    matchSpecialistPoolFromSpecialistPoolName(specialistPoolName: string): string | number;
    /**
     * Return a fully-qualified trainingPipeline resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} training_pipeline
     * @returns {string} Resource name string.
     */
    trainingPipelinePath(project: string, location: string, trainingPipeline: string): string;
    /**
     * Parse the project from TrainingPipeline resource.
     *
     * @param {string} trainingPipelineName
     *   A fully-qualified path representing TrainingPipeline resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTrainingPipelineName(trainingPipelineName: string): string | number;
    /**
     * Parse the location from TrainingPipeline resource.
     *
     * @param {string} trainingPipelineName
     *   A fully-qualified path representing TrainingPipeline resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTrainingPipelineName(trainingPipelineName: string): string | number;
    /**
     * Parse the training_pipeline from TrainingPipeline resource.
     *
     * @param {string} trainingPipelineName
     *   A fully-qualified path representing TrainingPipeline resource.
     * @returns {string} A string representing the training_pipeline.
     */
    matchTrainingPipelineFromTrainingPipelineName(trainingPipelineName: string): string | number;
    /**
     * Return a fully-qualified trial resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} study
     * @param {string} trial
     * @returns {string} Resource name string.
     */
    trialPath(project: string, location: string, study: string, trial: string): string;
    /**
     * Parse the project from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTrialName(trialName: string): string | number;
    /**
     * Parse the location from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTrialName(trialName: string): string | number;
    /**
     * Parse the study from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the study.
     */
    matchStudyFromTrialName(trialName: string): string | number;
    /**
     * Parse the trial from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the trial.
     */
    matchTrialFromTrialName(trialName: string): string | number;
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close(): Promise<void>;
}
