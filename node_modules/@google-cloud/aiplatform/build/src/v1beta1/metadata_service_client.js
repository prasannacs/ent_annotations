"use strict";
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataServiceClient = void 0;
/* global window */
const gax = require("google-gax");
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/metadata_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./metadata_service_client_config.json");
const google_gax_1 = require("google-gax");
const version = require('../../../package.json').version;
/**
 *  Service for reading and writing metadata entries.
 * @class
 * @memberof v1beta1
 */
class MetadataServiceClient {
    /**
     * Construct an instance of MetadataServiceClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP fallback mode.
     *     In fallback mode, a special browser-compatible transport implementation is used
     *     instead of gRPC transport. In browser context (if the `window` object is defined)
     *     the fallback mode is enabled automatically; set `options.fallback` to `false`
     *     if you need to override this behavior.
     */
    constructor(opts) {
        var _a, _b;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};
        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gax.fallback : gax;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set the default scopes in auth client if needed.
        if (servicePath === staticMembers.servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process !== 'undefined' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else if (opts.fallback === 'rest') {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            annotationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}/annotations/{annotation}'),
            annotationSpecPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}/annotationSpecs/{annotation_spec}'),
            artifactPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/metadataStores/{metadata_store}/artifacts/{artifact}'),
            batchPredictionJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/batchPredictionJobs/{batch_prediction_job}'),
            contextPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/metadataStores/{metadata_store}/contexts/{context}'),
            customJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/customJobs/{custom_job}'),
            dataItemPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}/dataItems/{data_item}'),
            dataLabelingJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/dataLabelingJobs/{data_labeling_job}'),
            datasetPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/datasets/{dataset}'),
            endpointPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/endpoints/{endpoint}'),
            entityTypePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}'),
            executionPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/metadataStores/{metadata_store}/executions/{execution}'),
            featurePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/featurestores/{featurestore}/entityTypes/{entity_type}/features/{feature}'),
            featurestorePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/featurestores/{featurestore}'),
            hyperparameterTuningJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/hyperparameterTuningJobs/{hyperparameter_tuning_job}'),
            indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/indexes/{index}'),
            indexEndpointPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/indexEndpoints/{index_endpoint}'),
            locationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}'),
            metadataSchemaPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/metadataStores/{metadata_store}/metadataSchemas/{metadata_schema}'),
            metadataStorePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/metadataStores/{metadata_store}'),
            modelPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/models/{model}'),
            modelDeploymentMonitoringJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/modelDeploymentMonitoringJobs/{model_deployment_monitoring_job}'),
            modelEvaluationPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}'),
            modelEvaluationSlicePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/models/{model}/evaluations/{evaluation}/slices/{slice}'),
            pipelineJobPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/pipelineJobs/{pipeline_job}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            specialistPoolPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/specialistPools/{specialist_pool}'),
            studyPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/studies/{study}'),
            tensorboardPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/tensorboards/{tensorboard}'),
            tensorboardExperimentPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}'),
            tensorboardRunPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}'),
            tensorboardTimeSeriesPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/tensorboards/{tensorboard}/experiments/{experiment}/runs/{run}/timeSeries/{time_series}'),
            trainingPipelinePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/trainingPipelines/{training_pipeline}'),
            trialPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/locations/{location}/studies/{study}/trials/{trial}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listMetadataStores: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'metadataStores'),
            listArtifacts: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'artifacts'),
            listContexts: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'contexts'),
            listExecutions: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'executions'),
            listMetadataSchemas: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'metadataSchemas'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        this.operationsClient = this._gaxModule
            .lro({
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        })
            .operationsClient(opts);
        const createMetadataStoreResponse = protoFilesRoot.lookup('.google.cloud.aiplatform.v1beta1.MetadataStore');
        const createMetadataStoreMetadata = protoFilesRoot.lookup('.google.cloud.aiplatform.v1beta1.CreateMetadataStoreOperationMetadata');
        const deleteMetadataStoreResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteMetadataStoreMetadata = protoFilesRoot.lookup('.google.cloud.aiplatform.v1beta1.DeleteMetadataStoreOperationMetadata');
        const deleteContextResponse = protoFilesRoot.lookup('.google.protobuf.Empty');
        const deleteContextMetadata = protoFilesRoot.lookup('.google.cloud.aiplatform.v1beta1.DeleteOperationMetadata');
        this.descriptors.longrunning = {
            createMetadataStore: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createMetadataStoreResponse.decode.bind(createMetadataStoreResponse), createMetadataStoreMetadata.decode.bind(createMetadataStoreMetadata)),
            deleteMetadataStore: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteMetadataStoreResponse.decode.bind(deleteMetadataStoreResponse), deleteMetadataStoreMetadata.decode.bind(deleteMetadataStoreMetadata)),
            deleteContext: new this._gaxModule.LongrunningDescriptor(this.operationsClient, deleteContextResponse.decode.bind(deleteContextResponse), deleteContextMetadata.decode.bind(deleteContextMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.cloud.aiplatform.v1beta1.MetadataService', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = gax.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.metadataServiceStub) {
            return this.metadataServiceStub;
        }
        // Put together the "service stub" for
        // google.cloud.aiplatform.v1beta1.MetadataService.
        this.metadataServiceStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.cloud.aiplatform.v1beta1.MetadataService')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.cloud.aiplatform.v1beta1.MetadataService, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const metadataServiceStubMethods = [
            'createMetadataStore',
            'getMetadataStore',
            'listMetadataStores',
            'deleteMetadataStore',
            'createArtifact',
            'getArtifact',
            'listArtifacts',
            'updateArtifact',
            'createContext',
            'getContext',
            'listContexts',
            'updateContext',
            'deleteContext',
            'addContextArtifactsAndExecutions',
            'addContextChildren',
            'queryContextLineageSubgraph',
            'createExecution',
            'getExecution',
            'listExecutions',
            'updateExecution',
            'addExecutionEvents',
            'queryExecutionInputsAndOutputs',
            'createMetadataSchema',
            'getMetadataSchema',
            'listMetadataSchemas',
            'queryArtifactLineageSubgraph',
        ];
        for (const methodName of metadataServiceStubMethods) {
            const callPromise = this.metadataServiceStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.metadataServiceStub;
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        return 'aiplatform.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath(),
     * exists for compatibility reasons.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        return 'aiplatform.googleapis.com';
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return ['https://www.googleapis.com/auth/cloud-platform'];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    /**
     * Retrieves a specific MetadataStore.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the MetadataStore to retrieve.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [MetadataStore]{@link google.cloud.aiplatform.v1beta1.MetadataStore}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.getMetadataStore(request);
     */
    getMetadataStore(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getMetadataStore(request, options, callback);
    }
    /**
     * Creates an Artifact associated with a MetadataStore.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the MetadataStore where the Artifact should
     *   be created.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {google.cloud.aiplatform.v1beta1.Artifact} request.artifact
     *   Required. The Artifact to create.
     * @param {string} request.artifactId
     *   The {artifact} portion of the resource name with the format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}
     *   If not provided, the Artifact's ID will be a UUID generated by the service.
     *   Must be 4-128 characters in length. Valid characters are /{@link 0-9|a-z}-/.
     *   Must be unique across all Artifacts in the parent MetadataStore. (Otherwise
     *   the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the
     *   caller can't view the preexisting Artifact.)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Artifact]{@link google.cloud.aiplatform.v1beta1.Artifact}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.createArtifact(request);
     */
    createArtifact(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createArtifact(request, options, callback);
    }
    /**
     * Retrieves a specific Artifact.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Artifact to retrieve.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Artifact]{@link google.cloud.aiplatform.v1beta1.Artifact}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.getArtifact(request);
     */
    getArtifact(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getArtifact(request, options, callback);
    }
    /**
     * Updates a stored Artifact.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.aiplatform.v1beta1.Artifact} request.artifact
     *   Required. The Artifact containing updates.
     *   The Artifact's {@link google.cloud.aiplatform.v1beta1.Artifact.name|Artifact.name} field is used to identify the Artifact to
     *   be updated.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. A FieldMask indicating which fields should be updated.
     * @param {boolean} request.allowMissing
     *   If set to true, and the {@link google.cloud.aiplatform.v1beta1.Artifact|Artifact} is not found, a new {@link google.cloud.aiplatform.v1beta1.Artifact|Artifact} will
     *   be created. In this situation, `update_mask` is ignored.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Artifact]{@link google.cloud.aiplatform.v1beta1.Artifact}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.updateArtifact(request);
     */
    updateArtifact(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'artifact.name': request.artifact.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateArtifact(request, options, callback);
    }
    /**
     * Creates a Context associated with a MetadataStore.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the MetadataStore where the Context should be
     *   created.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {google.cloud.aiplatform.v1beta1.Context} request.context
     *   Required. The Context to create.
     * @param {string} request.contextId
     *   The {context} portion of the resource name with the format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}.
     *   If not provided, the Context's ID will be a UUID generated by the service.
     *   Must be 4-128 characters in length. Valid characters are /{@link 0-9|a-z}-/.
     *   Must be unique across all Contexts in the parent MetadataStore. (Otherwise
     *   the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED if the
     *   caller can't view the preexisting Context.)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Context]{@link google.cloud.aiplatform.v1beta1.Context}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.createContext(request);
     */
    createContext(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createContext(request, options, callback);
    }
    /**
     * Retrieves a specific Context.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Context to retrieve.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Context]{@link google.cloud.aiplatform.v1beta1.Context}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.getContext(request);
     */
    getContext(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getContext(request, options, callback);
    }
    /**
     * Updates a stored Context.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.aiplatform.v1beta1.Context} request.context
     *   Required. The Context containing updates.
     *   The Context's {@link google.cloud.aiplatform.v1beta1.Context.name|Context.name} field is used to identify the Context to be
     *   updated.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. A FieldMask indicating which fields should be updated.
     * @param {boolean} request.allowMissing
     *   If set to true, and the {@link google.cloud.aiplatform.v1beta1.Context|Context} is not found, a new {@link google.cloud.aiplatform.v1beta1.Context|Context} will be
     *   created. In this situation, `update_mask` is ignored.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Context]{@link google.cloud.aiplatform.v1beta1.Context}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.updateContext(request);
     */
    updateContext(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'context.name': request.context.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateContext(request, options, callback);
    }
    /**
     * Adds a set of Artifacts and Executions to a Context. If any of the
     * Artifacts or Executions have already been added to a Context, they are
     * simply skipped.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.context
     *   Required. The resource name of the Context that the Artifacts and Executions
     *   belong to.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}
     * @param {string[]} request.artifacts
     *   The resource names of the Artifacts to attribute to the Context.
     *
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}
     * @param {string[]} request.executions
     *   The resource names of the Executions to associate with the
     *   Context.
     *
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [AddContextArtifactsAndExecutionsResponse]{@link google.cloud.aiplatform.v1beta1.AddContextArtifactsAndExecutionsResponse}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.addContextArtifactsAndExecutions(request);
     */
    addContextArtifactsAndExecutions(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                context: request.context || '',
            });
        this.initialize();
        return this.innerApiCalls.addContextArtifactsAndExecutions(request, options, callback);
    }
    /**
     * Adds a set of Contexts as children to a parent Context. If any of the
     * child Contexts have already been added to the parent Context, they are
     * simply skipped. If this call would create a cycle or cause any Context to
     * have more than 10 parents, the request will fail with an INVALID_ARGUMENT
     * error.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.context
     *   Required. The resource name of the parent Context.
     *
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}
     * @param {string[]} request.childContexts
     *   The resource names of the child Contexts.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [AddContextChildrenResponse]{@link google.cloud.aiplatform.v1beta1.AddContextChildrenResponse}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.addContextChildren(request);
     */
    addContextChildren(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                context: request.context || '',
            });
        this.initialize();
        return this.innerApiCalls.addContextChildren(request, options, callback);
    }
    /**
     * Retrieves Artifacts and Executions within the specified Context, connected
     * by Event edges and returned as a LineageSubgraph.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.context
     *   Required. The resource name of the Context whose Artifacts and Executions
     *   should be retrieved as a LineageSubgraph.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}
     *
     *   The request may error with FAILED_PRECONDITION if the number of Artifacts,
     *   the number of Executions, or the number of Events that would be returned
     *   for the Context exceeds 1000.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [LineageSubgraph]{@link google.cloud.aiplatform.v1beta1.LineageSubgraph}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.queryContextLineageSubgraph(request);
     */
    queryContextLineageSubgraph(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                context: request.context || '',
            });
        this.initialize();
        return this.innerApiCalls.queryContextLineageSubgraph(request, options, callback);
    }
    /**
     * Creates an Execution associated with a MetadataStore.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the MetadataStore where the Execution should
     *   be created.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {google.cloud.aiplatform.v1beta1.Execution} request.execution
     *   Required. The Execution to create.
     * @param {string} request.executionId
     *   The {execution} portion of the resource name with the format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}
     *   If not provided, the Execution's ID will be a UUID generated by the
     *   service.
     *   Must be 4-128 characters in length. Valid characters are /{@link 0-9|a-z}-/.
     *   Must be unique across all Executions in the parent MetadataStore.
     *   (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
     *   if the caller can't view the preexisting Execution.)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Execution]{@link google.cloud.aiplatform.v1beta1.Execution}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.createExecution(request);
     */
    createExecution(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createExecution(request, options, callback);
    }
    /**
     * Retrieves a specific Execution.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Execution to retrieve.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Execution]{@link google.cloud.aiplatform.v1beta1.Execution}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.getExecution(request);
     */
    getExecution(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getExecution(request, options, callback);
    }
    /**
     * Updates a stored Execution.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {google.cloud.aiplatform.v1beta1.Execution} request.execution
     *   Required. The Execution containing updates.
     *   The Execution's {@link google.cloud.aiplatform.v1beta1.Execution.name|Execution.name} field is used to identify the Execution
     *   to be updated.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}
     * @param {google.protobuf.FieldMask} request.updateMask
     *   Required. A FieldMask indicating which fields should be updated.
     * @param {boolean} request.allowMissing
     *   If set to true, and the {@link google.cloud.aiplatform.v1beta1.Execution|Execution} is not found, a new {@link google.cloud.aiplatform.v1beta1.Execution|Execution}
     *   will be created. In this situation, `update_mask` is ignored.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [Execution]{@link google.cloud.aiplatform.v1beta1.Execution}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.updateExecution(request);
     */
    updateExecution(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                'execution.name': request.execution.name || '',
            });
        this.initialize();
        return this.innerApiCalls.updateExecution(request, options, callback);
    }
    /**
     * Adds Events to the specified Execution. An Event indicates whether an
     * Artifact was used as an input or output for an Execution. If an Event
     * already exists between the Execution and the Artifact, the Event is
     * skipped.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.execution
     *   Required. The resource name of the Execution that the Events connect
     *   Artifacts with.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}
     * @param {number[]} request.events
     *   The Events to create and add.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [AddExecutionEventsResponse]{@link google.cloud.aiplatform.v1beta1.AddExecutionEventsResponse}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.addExecutionEvents(request);
     */
    addExecutionEvents(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                execution: request.execution || '',
            });
        this.initialize();
        return this.innerApiCalls.addExecutionEvents(request, options, callback);
    }
    /**
     * Obtains the set of input and output Artifacts for this Execution, in the
     * form of LineageSubgraph that also contains the Execution and connecting
     * Events.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.execution
     *   Required. The resource name of the Execution whose input and output Artifacts should
     *   be retrieved as a LineageSubgraph.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/executions/{execution}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [LineageSubgraph]{@link google.cloud.aiplatform.v1beta1.LineageSubgraph}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.queryExecutionInputsAndOutputs(request);
     */
    queryExecutionInputsAndOutputs(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                execution: request.execution || '',
            });
        this.initialize();
        return this.innerApiCalls.queryExecutionInputsAndOutputs(request, options, callback);
    }
    /**
     * Creates a MetadataSchema.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the MetadataStore where the MetadataSchema should
     *   be created.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {google.cloud.aiplatform.v1beta1.MetadataSchema} request.metadataSchema
     *   Required. The MetadataSchema to create.
     * @param {string} request.metadataSchemaId
     *   The {metadata_schema} portion of the resource name with the format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}
     *   If not provided, the MetadataStore's ID will be a UUID generated by the
     *   service.
     *   Must be 4-128 characters in length. Valid characters are /{@link 0-9|a-z}-/.
     *   Must be unique across all MetadataSchemas in the parent Location.
     *   (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
     *   if the caller can't view the preexisting MetadataSchema.)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [MetadataSchema]{@link google.cloud.aiplatform.v1beta1.MetadataSchema}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.createMetadataSchema(request);
     */
    createMetadataSchema(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createMetadataSchema(request, options, callback);
    }
    /**
     * Retrieves a specific MetadataSchema.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the MetadataSchema to retrieve.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/metadataSchemas/{metadataschema}
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [MetadataSchema]{@link google.cloud.aiplatform.v1beta1.MetadataSchema}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.getMetadataSchema(request);
     */
    getMetadataSchema(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.getMetadataSchema(request, options, callback);
    }
    /**
     * Retrieves lineage of an Artifact represented through Artifacts and
     * Executions connected by Event edges and returned as a LineageSubgraph.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.artifact
     *   Required. The resource name of the Artifact whose Lineage needs to be retrieved as a
     *   LineageSubgraph.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/artifacts/{artifact}
     *
     *   The request may error with FAILED_PRECONDITION if the number of Artifacts,
     *   the number of Executions, or the number of Events that would be returned
     *   for the Context exceeds 1000.
     * @param {number} request.maxHops
     *   Specifies the size of the lineage graph in terms of number of hops from the
     *   specified artifact.
     *   Negative Value: INVALID_ARGUMENT error is returned
     *   0: Only input artifact is returned.
     *   No value: Transitive closure is performed to return the complete graph.
     * @param {string} request.filter
     *   Filter specifying the boolean condition for the Artifacts to satisfy in
     *   order to be part of the Lineage Subgraph.
     *   The syntax to define filter query is based on https://google.aip.dev/160.
     *   The supported set of filters include the following:
     *
     *   *  **Attribute filtering**:
     *      For example: `display_name = "test"`
     *      Supported fields include: `name`, `display_name`, `uri`, `state`,
     *      `schema_title`, `create_time`, and `update_time`.
     *      Time fields, such as `create_time` and `update_time`, require values
     *      specified in RFC-3339 format.
     *      For example: `create_time = "2020-11-19T11:30:00-04:00"`
     *   *  **Metadata field**:
     *      To filter on metadata fields use traversal operation as follows:
     *      `metadata.<field_name>.<type_value>`.
     *      For example: `metadata.field_1.number_value = 10.0`
     *
     *   Each of the above supported filter types can be combined together using
     *   logical operators (`AND` & `OR`).
     *
     *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing [LineageSubgraph]{@link google.cloud.aiplatform.v1beta1.LineageSubgraph}.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
     *   for more details and examples.
     * @example
     * const [response] = await client.queryArtifactLineageSubgraph(request);
     */
    queryArtifactLineageSubgraph(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                artifact: request.artifact || '',
            });
        this.initialize();
        return this.innerApiCalls.queryArtifactLineageSubgraph(request, options, callback);
    }
    /**
     * Initializes a MetadataStore, including allocation of resources.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The resource name of the Location where the MetadataStore should
     *   be created.
     *   Format: projects/{project}/locations/{location}/
     * @param {google.cloud.aiplatform.v1beta1.MetadataStore} request.metadataStore
     *   Required. The MetadataStore to create.
     * @param {string} request.metadataStoreId
     *   The {metadatastore} portion of the resource name with the format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     *   If not provided, the MetadataStore's ID will be a UUID generated by the
     *   service.
     *   Must be 4-128 characters in length. Valid characters are /{@link 0-9|a-z}-/.
     *   Must be unique across all MetadataStores in the parent Location.
     *   (Otherwise the request will fail with ALREADY_EXISTS, or PERMISSION_DENIED
     *   if the caller can't view the preexisting MetadataStore.)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const [operation] = await client.createMetadataStore(request);
     * const [response] = await operation.promise();
     */
    createMetadataStore(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.createMetadataStore(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createMetadataStore()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkCreateMetadataStoreProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    async checkCreateMetadataStoreProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createMetadataStore, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Deletes a single MetadataStore.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the MetadataStore to delete.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {boolean} request.force
     *   If set to true, any child resources of this MetadataStore will be deleted.
     *   (Otherwise, the request will fail with a FAILED_PRECONDITION error if the
     *   MetadataStore has any child resources.)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const [operation] = await client.deleteMetadataStore(request);
     * const [response] = await operation.promise();
     */
    deleteMetadataStore(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteMetadataStore(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteMetadataStore()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkDeleteMetadataStoreProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    async checkDeleteMetadataStoreProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteMetadataStore, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Deletes a stored Context.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.name
     *   Required. The resource name of the Context to retrieve.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}/contexts/{context}
     * @param {boolean} request.force
     *   If set to true, any child resources of this Context will be deleted.
     *   (Otherwise, the request will fail with a FAILED_PRECONDITION error if the
     *   Context has any child resources, such as another Context, Artifact, or
     *   Execution).
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is an object representing
     *   a long running operation. Its `promise()` method returns a promise
     *   you can `await` for.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const [operation] = await client.deleteContext(request);
     * const [response] = await operation.promise();
     */
    deleteContext(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                name: request.name || '',
            });
        this.initialize();
        return this.innerApiCalls.deleteContext(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `deleteContext()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
     *   for more details and examples.
     * @example
     * const decodedOperation = await checkDeleteContextProgress(name);
     * console.log(decodedOperation.result);
     * console.log(decodedOperation.done);
     * console.log(decodedOperation.metadata);
     */
    async checkDeleteContextProgress(name) {
        const request = new google_gax_1.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteContext, gax.createDefaultBackoffSettings());
        return decodeOperation;
    }
    /**
     * Lists MetadataStores for a Location.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Location whose MetadataStores should be listed.
     *   Format:
     *   projects/{project}/locations/{location}
     * @param {number} request.pageSize
     *   The maximum number of Metadata Stores to return. The service may return
     *   fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous
     *   {@link google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataStores|MetadataService.ListMetadataStores} call. Provide this to retrieve the
     *   subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [MetadataStore]{@link google.cloud.aiplatform.v1beta1.MetadataStore}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listMetadataStoresAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listMetadataStores(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listMetadataStores(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Location whose MetadataStores should be listed.
     *   Format:
     *   projects/{project}/locations/{location}
     * @param {number} request.pageSize
     *   The maximum number of Metadata Stores to return. The service may return
     *   fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous
     *   {@link google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataStores|MetadataService.ListMetadataStores} call. Provide this to retrieve the
     *   subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [MetadataStore]{@link google.cloud.aiplatform.v1beta1.MetadataStore} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listMetadataStoresAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listMetadataStoresStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listMetadataStores.createStream(this.innerApiCalls.listMetadataStores, request, callSettings);
    }
    /**
     * Equivalent to `listMetadataStores`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The Location whose MetadataStores should be listed.
     *   Format:
     *   projects/{project}/locations/{location}
     * @param {number} request.pageSize
     *   The maximum number of Metadata Stores to return. The service may return
     *   fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous
     *   {@link google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataStores|MetadataService.ListMetadataStores} call. Provide this to retrieve the
     *   subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [MetadataStore]{@link google.cloud.aiplatform.v1beta1.MetadataStore}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listMetadataStoresAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listMetadataStoresAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listMetadataStores.asyncIterate(this.innerApiCalls['listMetadataStores'], request, callSettings);
    }
    /**
     * Lists Artifacts in the MetadataStore.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose Artifacts should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of Artifacts to return. The service may return fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous {@link google.cloud.aiplatform.v1beta1.MetadataService.ListArtifacts|MetadataService.ListArtifacts}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   Filter specifying the boolean condition for the Artifacts to satisfy in
     *   order to be part of the result set.
     *   The syntax to define filter query is based on https://google.aip.dev/160.
     *   The supported set of filters include the following:
     *
     *   *   **Attribute filtering**:
     *       For example: `display_name = "test"`.
     *       Supported fields include: `name`, `display_name`, `uri`, `state`,
     *       `schema_title`, `create_time`, and `update_time`.
     *       Time fields, such as `create_time` and `update_time`, require values
     *       specified in RFC-3339 format.
     *       For example: `create_time = "2020-11-19T11:30:00-04:00"`
     *   *   **Metadata field**:
     *       To filter on metadata fields use traversal operation as follows:
     *       `metadata.<field_name>.<type_value>`.
     *       For example: `metadata.field_1.number_value = 10.0`
     *   *   **Context based filtering**:
     *       To filter Artifacts based on the contexts to which they belong, use the
     *       function operator with the full resource name
     *       `in_context(<context-name>)`.
     *       For example:
     *       `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
     *
     *   Each of the above supported filter types can be combined together using
     *   logical operators (`AND` & `OR`).
     *
     *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [Artifact]{@link google.cloud.aiplatform.v1beta1.Artifact}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listArtifactsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listArtifacts(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listArtifacts(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose Artifacts should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of Artifacts to return. The service may return fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous {@link google.cloud.aiplatform.v1beta1.MetadataService.ListArtifacts|MetadataService.ListArtifacts}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   Filter specifying the boolean condition for the Artifacts to satisfy in
     *   order to be part of the result set.
     *   The syntax to define filter query is based on https://google.aip.dev/160.
     *   The supported set of filters include the following:
     *
     *   *   **Attribute filtering**:
     *       For example: `display_name = "test"`.
     *       Supported fields include: `name`, `display_name`, `uri`, `state`,
     *       `schema_title`, `create_time`, and `update_time`.
     *       Time fields, such as `create_time` and `update_time`, require values
     *       specified in RFC-3339 format.
     *       For example: `create_time = "2020-11-19T11:30:00-04:00"`
     *   *   **Metadata field**:
     *       To filter on metadata fields use traversal operation as follows:
     *       `metadata.<field_name>.<type_value>`.
     *       For example: `metadata.field_1.number_value = 10.0`
     *   *   **Context based filtering**:
     *       To filter Artifacts based on the contexts to which they belong, use the
     *       function operator with the full resource name
     *       `in_context(<context-name>)`.
     *       For example:
     *       `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
     *
     *   Each of the above supported filter types can be combined together using
     *   logical operators (`AND` & `OR`).
     *
     *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Artifact]{@link google.cloud.aiplatform.v1beta1.Artifact} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listArtifactsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listArtifactsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listArtifacts.createStream(this.innerApiCalls.listArtifacts, request, callSettings);
    }
    /**
     * Equivalent to `listArtifacts`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose Artifacts should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of Artifacts to return. The service may return fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous {@link google.cloud.aiplatform.v1beta1.MetadataService.ListArtifacts|MetadataService.ListArtifacts}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   Filter specifying the boolean condition for the Artifacts to satisfy in
     *   order to be part of the result set.
     *   The syntax to define filter query is based on https://google.aip.dev/160.
     *   The supported set of filters include the following:
     *
     *   *   **Attribute filtering**:
     *       For example: `display_name = "test"`.
     *       Supported fields include: `name`, `display_name`, `uri`, `state`,
     *       `schema_title`, `create_time`, and `update_time`.
     *       Time fields, such as `create_time` and `update_time`, require values
     *       specified in RFC-3339 format.
     *       For example: `create_time = "2020-11-19T11:30:00-04:00"`
     *   *   **Metadata field**:
     *       To filter on metadata fields use traversal operation as follows:
     *       `metadata.<field_name>.<type_value>`.
     *       For example: `metadata.field_1.number_value = 10.0`
     *   *   **Context based filtering**:
     *       To filter Artifacts based on the contexts to which they belong, use the
     *       function operator with the full resource name
     *       `in_context(<context-name>)`.
     *       For example:
     *       `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
     *
     *   Each of the above supported filter types can be combined together using
     *   logical operators (`AND` & `OR`).
     *
     *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Artifact]{@link google.cloud.aiplatform.v1beta1.Artifact}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listArtifactsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listArtifactsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listArtifacts.asyncIterate(this.innerApiCalls['listArtifacts'], request, callSettings);
    }
    /**
     * Lists Contexts on the MetadataStore.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose Contexts should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of Contexts to return. The service may return fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous {@link google.cloud.aiplatform.v1beta1.MetadataService.ListContexts|MetadataService.ListContexts}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   Filter specifying the boolean condition for the Contexts to satisfy in
     *   order to be part of the result set.
     *   The syntax to define filter query is based on https://google.aip.dev/160.
     *   Following are the supported set of filters:
     *
     *   *  **Attribute filtering**:
     *      For example: `display_name = "test"`.
     *      Supported fields include: `name`, `display_name`, `schema_title`,
     *      `create_time`, and `update_time`.
     *      Time fields, such as `create_time` and `update_time`, require values
     *      specified in RFC-3339 format.
     *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
     *   *  **Metadata field**:
     *      To filter on metadata fields use traversal operation as follows:
     *      `metadata.<field_name>.<type_value>`.
     *      For example: `metadata.field_1.number_value = 10.0`.
     *   *  **Parent Child filtering**:
     *      To filter Contexts based on parent-child relationship use the HAS
     *      operator as follows:
     *
     *      ```
     *      parent_contexts:
     *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
     *      child_contexts:
     *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
     *      ```
     *
     *   Each of the above supported filters can be combined together using
     *   logical operators (`AND` & `OR`).
     *
     *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [Context]{@link google.cloud.aiplatform.v1beta1.Context}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listContextsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listContexts(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listContexts(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose Contexts should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of Contexts to return. The service may return fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous {@link google.cloud.aiplatform.v1beta1.MetadataService.ListContexts|MetadataService.ListContexts}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   Filter specifying the boolean condition for the Contexts to satisfy in
     *   order to be part of the result set.
     *   The syntax to define filter query is based on https://google.aip.dev/160.
     *   Following are the supported set of filters:
     *
     *   *  **Attribute filtering**:
     *      For example: `display_name = "test"`.
     *      Supported fields include: `name`, `display_name`, `schema_title`,
     *      `create_time`, and `update_time`.
     *      Time fields, such as `create_time` and `update_time`, require values
     *      specified in RFC-3339 format.
     *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
     *   *  **Metadata field**:
     *      To filter on metadata fields use traversal operation as follows:
     *      `metadata.<field_name>.<type_value>`.
     *      For example: `metadata.field_1.number_value = 10.0`.
     *   *  **Parent Child filtering**:
     *      To filter Contexts based on parent-child relationship use the HAS
     *      operator as follows:
     *
     *      ```
     *      parent_contexts:
     *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
     *      child_contexts:
     *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
     *      ```
     *
     *   Each of the above supported filters can be combined together using
     *   logical operators (`AND` & `OR`).
     *
     *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Context]{@link google.cloud.aiplatform.v1beta1.Context} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listContextsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listContextsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listContexts.createStream(this.innerApiCalls.listContexts, request, callSettings);
    }
    /**
     * Equivalent to `listContexts`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose Contexts should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of Contexts to return. The service may return fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous {@link google.cloud.aiplatform.v1beta1.MetadataService.ListContexts|MetadataService.ListContexts}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   Filter specifying the boolean condition for the Contexts to satisfy in
     *   order to be part of the result set.
     *   The syntax to define filter query is based on https://google.aip.dev/160.
     *   Following are the supported set of filters:
     *
     *   *  **Attribute filtering**:
     *      For example: `display_name = "test"`.
     *      Supported fields include: `name`, `display_name`, `schema_title`,
     *      `create_time`, and `update_time`.
     *      Time fields, such as `create_time` and `update_time`, require values
     *      specified in RFC-3339 format.
     *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
     *   *  **Metadata field**:
     *      To filter on metadata fields use traversal operation as follows:
     *      `metadata.<field_name>.<type_value>`.
     *      For example: `metadata.field_1.number_value = 10.0`.
     *   *  **Parent Child filtering**:
     *      To filter Contexts based on parent-child relationship use the HAS
     *      operator as follows:
     *
     *      ```
     *      parent_contexts:
     *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
     *      child_contexts:
     *      "projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context_id>"
     *      ```
     *
     *   Each of the above supported filters can be combined together using
     *   logical operators (`AND` & `OR`).
     *
     *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Context]{@link google.cloud.aiplatform.v1beta1.Context}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listContextsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listContextsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listContexts.asyncIterate(this.innerApiCalls['listContexts'], request, callSettings);
    }
    /**
     * Lists Executions in the MetadataStore.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose Executions should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of Executions to return. The service may return fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous {@link google.cloud.aiplatform.v1beta1.MetadataService.ListExecutions|MetadataService.ListExecutions}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with an
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   Filter specifying the boolean condition for the Executions to satisfy in
     *   order to be part of the result set.
     *   The syntax to define filter query is based on https://google.aip.dev/160.
     *   Following are the supported set of filters:
     *
     *   *  **Attribute filtering**:
     *      For example: `display_name = "test"`.
     *      Supported fields include: `name`, `display_name`, `state`,
     *      `schema_title`, `create_time`, and `update_time`.
     *      Time fields, such as `create_time` and `update_time`, require values
     *      specified in RFC-3339 format.
     *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
     *   *  **Metadata field**:
     *      To filter on metadata fields use traversal operation as follows:
     *      `metadata.<field_name>.<type_value>`
     *      For example: `metadata.field_1.number_value = 10.0`
     *   *  **Context based filtering**:
     *      To filter Executions based on the contexts to which they belong use
     *      the function operator with the full resource name:
     *      `in_context(<context-name>)`.
     *      For example:
     *      `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
     *
     *   Each of the above supported filters can be combined together using
     *   logical operators (`AND` & `OR`).
     *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [Execution]{@link google.cloud.aiplatform.v1beta1.Execution}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listExecutionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listExecutions(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listExecutions(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose Executions should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of Executions to return. The service may return fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous {@link google.cloud.aiplatform.v1beta1.MetadataService.ListExecutions|MetadataService.ListExecutions}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with an
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   Filter specifying the boolean condition for the Executions to satisfy in
     *   order to be part of the result set.
     *   The syntax to define filter query is based on https://google.aip.dev/160.
     *   Following are the supported set of filters:
     *
     *   *  **Attribute filtering**:
     *      For example: `display_name = "test"`.
     *      Supported fields include: `name`, `display_name`, `state`,
     *      `schema_title`, `create_time`, and `update_time`.
     *      Time fields, such as `create_time` and `update_time`, require values
     *      specified in RFC-3339 format.
     *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
     *   *  **Metadata field**:
     *      To filter on metadata fields use traversal operation as follows:
     *      `metadata.<field_name>.<type_value>`
     *      For example: `metadata.field_1.number_value = 10.0`
     *   *  **Context based filtering**:
     *      To filter Executions based on the contexts to which they belong use
     *      the function operator with the full resource name:
     *      `in_context(<context-name>)`.
     *      For example:
     *      `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
     *
     *   Each of the above supported filters can be combined together using
     *   logical operators (`AND` & `OR`).
     *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [Execution]{@link google.cloud.aiplatform.v1beta1.Execution} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listExecutionsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listExecutionsStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listExecutions.createStream(this.innerApiCalls.listExecutions, request, callSettings);
    }
    /**
     * Equivalent to `listExecutions`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose Executions should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of Executions to return. The service may return fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous {@link google.cloud.aiplatform.v1beta1.MetadataService.ListExecutions|MetadataService.ListExecutions}
     *   call. Provide this to retrieve the subsequent page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with an
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   Filter specifying the boolean condition for the Executions to satisfy in
     *   order to be part of the result set.
     *   The syntax to define filter query is based on https://google.aip.dev/160.
     *   Following are the supported set of filters:
     *
     *   *  **Attribute filtering**:
     *      For example: `display_name = "test"`.
     *      Supported fields include: `name`, `display_name`, `state`,
     *      `schema_title`, `create_time`, and `update_time`.
     *      Time fields, such as `create_time` and `update_time`, require values
     *      specified in RFC-3339 format.
     *      For example: `create_time = "2020-11-19T11:30:00-04:00"`.
     *   *  **Metadata field**:
     *      To filter on metadata fields use traversal operation as follows:
     *      `metadata.<field_name>.<type_value>`
     *      For example: `metadata.field_1.number_value = 10.0`
     *   *  **Context based filtering**:
     *      To filter Executions based on the contexts to which they belong use
     *      the function operator with the full resource name:
     *      `in_context(<context-name>)`.
     *      For example:
     *      `in_context("projects/<project_number>/locations/<location>/metadataStores/<metadatastore_name>/contexts/<context-id>")`
     *
     *   Each of the above supported filters can be combined together using
     *   logical operators (`AND` & `OR`).
     *   For example: `display_name = "test" AND metadata.field1.bool_value = true`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [Execution]{@link google.cloud.aiplatform.v1beta1.Execution}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listExecutionsAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listExecutionsAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listExecutions.asyncIterate(this.innerApiCalls['listExecutions'], request, callSettings);
    }
    /**
     * Lists MetadataSchemas.
     *
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose MetadataSchemas should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of MetadataSchemas to return. The service may return
     *   fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous
     *   {@link google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataSchemas|MetadataService.ListMetadataSchemas} call. Provide this to retrieve the
     *   next page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   A query to filter available MetadataSchemas for matching results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Promise} - The promise which resolves to an array.
     *   The first element of the array is Array of [MetadataSchema]{@link google.cloud.aiplatform.v1beta1.MetadataSchema}.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed and will merge results from all the pages into this array.
     *   Note that it can affect your quota.
     *   We recommend using `listMetadataSchemasAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listMetadataSchemas(request, optionsOrCallback, callback) {
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        this.initialize();
        return this.innerApiCalls.listMetadataSchemas(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose MetadataSchemas should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of MetadataSchemas to return. The service may return
     *   fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous
     *   {@link google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataSchemas|MetadataService.ListMetadataSchemas} call. Provide this to retrieve the
     *   next page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   A query to filter available MetadataSchemas for matching results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing [MetadataSchema]{@link google.cloud.aiplatform.v1beta1.MetadataSchema} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listMetadataSchemasAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     */
    listMetadataSchemasStream(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listMetadataSchemas.createStream(this.innerApiCalls.listMetadataSchemas, request, callSettings);
    }
    /**
     * Equivalent to `listMetadataSchemas`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The MetadataStore whose MetadataSchemas should be listed.
     *   Format:
     *   projects/{project}/locations/{location}/metadataStores/{metadatastore}
     * @param {number} request.pageSize
     *   The maximum number of MetadataSchemas to return. The service may return
     *   fewer.
     *   Must be in range 1-1000, inclusive. Defaults to 100.
     * @param {string} request.pageToken
     *   A page token, received from a previous
     *   {@link google.cloud.aiplatform.v1beta1.MetadataService.ListMetadataSchemas|MetadataService.ListMetadataSchemas} call. Provide this to retrieve the
     *   next page.
     *
     *   When paginating, all other provided parameters must match the call that
     *   provided the page token. (Otherwise the request will fail with
     *   INVALID_ARGUMENT error.)
     * @param {string} request.filter
     *   A query to filter available MetadataSchemas for matching results.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
     *   When you iterate the returned iterable, each element will be an object representing
     *   [MetadataSchema]{@link google.cloud.aiplatform.v1beta1.MetadataSchema}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the
     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
     *   for more details and examples.
     * @example
     * const iterable = client.listMetadataSchemasAsync(request);
     * for await (const response of iterable) {
     *   // process response
     * }
     */
    listMetadataSchemasAsync(request, options) {
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            gax.routingHeader.fromParams({
                parent: request.parent || '',
            });
        options = options || {};
        const callSettings = new gax.CallSettings(options);
        this.initialize();
        return this.descriptors.page.listMetadataSchemas.asyncIterate(this.innerApiCalls['listMetadataSchemas'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified annotation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} data_item
     * @param {string} annotation
     * @returns {string} Resource name string.
     */
    annotationPath(project, location, dataset, dataItem, annotation) {
        return this.pathTemplates.annotationPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
            data_item: dataItem,
            annotation: annotation,
        });
    }
    /**
     * Parse the project from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAnnotationName(annotationName) {
        return this.pathTemplates.annotationPathTemplate.match(annotationName)
            .project;
    }
    /**
     * Parse the location from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAnnotationName(annotationName) {
        return this.pathTemplates.annotationPathTemplate.match(annotationName)
            .location;
    }
    /**
     * Parse the dataset from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromAnnotationName(annotationName) {
        return this.pathTemplates.annotationPathTemplate.match(annotationName)
            .dataset;
    }
    /**
     * Parse the data_item from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the data_item.
     */
    matchDataItemFromAnnotationName(annotationName) {
        return this.pathTemplates.annotationPathTemplate.match(annotationName)
            .data_item;
    }
    /**
     * Parse the annotation from Annotation resource.
     *
     * @param {string} annotationName
     *   A fully-qualified path representing Annotation resource.
     * @returns {string} A string representing the annotation.
     */
    matchAnnotationFromAnnotationName(annotationName) {
        return this.pathTemplates.annotationPathTemplate.match(annotationName)
            .annotation;
    }
    /**
     * Return a fully-qualified annotationSpec resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} annotation_spec
     * @returns {string} Resource name string.
     */
    annotationSpecPath(project, location, dataset, annotationSpec) {
        return this.pathTemplates.annotationSpecPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
            annotation_spec: annotationSpec,
        });
    }
    /**
     * Parse the project from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).project;
    }
    /**
     * Parse the location from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).location;
    }
    /**
     * Parse the dataset from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).dataset;
    }
    /**
     * Parse the annotation_spec from AnnotationSpec resource.
     *
     * @param {string} annotationSpecName
     *   A fully-qualified path representing AnnotationSpec resource.
     * @returns {string} A string representing the annotation_spec.
     */
    matchAnnotationSpecFromAnnotationSpecName(annotationSpecName) {
        return this.pathTemplates.annotationSpecPathTemplate.match(annotationSpecName).annotation_spec;
    }
    /**
     * Return a fully-qualified artifact resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} metadata_store
     * @param {string} artifact
     * @returns {string} Resource name string.
     */
    artifactPath(project, location, metadataStore, artifact) {
        return this.pathTemplates.artifactPathTemplate.render({
            project: project,
            location: location,
            metadata_store: metadataStore,
            artifact: artifact,
        });
    }
    /**
     * Parse the project from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromArtifactName(artifactName) {
        return this.pathTemplates.artifactPathTemplate.match(artifactName).project;
    }
    /**
     * Parse the location from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromArtifactName(artifactName) {
        return this.pathTemplates.artifactPathTemplate.match(artifactName).location;
    }
    /**
     * Parse the metadata_store from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the metadata_store.
     */
    matchMetadataStoreFromArtifactName(artifactName) {
        return this.pathTemplates.artifactPathTemplate.match(artifactName)
            .metadata_store;
    }
    /**
     * Parse the artifact from Artifact resource.
     *
     * @param {string} artifactName
     *   A fully-qualified path representing Artifact resource.
     * @returns {string} A string representing the artifact.
     */
    matchArtifactFromArtifactName(artifactName) {
        return this.pathTemplates.artifactPathTemplate.match(artifactName).artifact;
    }
    /**
     * Return a fully-qualified batchPredictionJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} batch_prediction_job
     * @returns {string} Resource name string.
     */
    batchPredictionJobPath(project, location, batchPredictionJob) {
        return this.pathTemplates.batchPredictionJobPathTemplate.render({
            project: project,
            location: location,
            batch_prediction_job: batchPredictionJob,
        });
    }
    /**
     * Parse the project from BatchPredictionJob resource.
     *
     * @param {string} batchPredictionJobName
     *   A fully-qualified path representing BatchPredictionJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBatchPredictionJobName(batchPredictionJobName) {
        return this.pathTemplates.batchPredictionJobPathTemplate.match(batchPredictionJobName).project;
    }
    /**
     * Parse the location from BatchPredictionJob resource.
     *
     * @param {string} batchPredictionJobName
     *   A fully-qualified path representing BatchPredictionJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromBatchPredictionJobName(batchPredictionJobName) {
        return this.pathTemplates.batchPredictionJobPathTemplate.match(batchPredictionJobName).location;
    }
    /**
     * Parse the batch_prediction_job from BatchPredictionJob resource.
     *
     * @param {string} batchPredictionJobName
     *   A fully-qualified path representing BatchPredictionJob resource.
     * @returns {string} A string representing the batch_prediction_job.
     */
    matchBatchPredictionJobFromBatchPredictionJobName(batchPredictionJobName) {
        return this.pathTemplates.batchPredictionJobPathTemplate.match(batchPredictionJobName).batch_prediction_job;
    }
    /**
     * Return a fully-qualified context resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} metadata_store
     * @param {string} context
     * @returns {string} Resource name string.
     */
    contextPath(project, location, metadataStore, context) {
        return this.pathTemplates.contextPathTemplate.render({
            project: project,
            location: location,
            metadata_store: metadataStore,
            context: context,
        });
    }
    /**
     * Parse the project from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromContextName(contextName) {
        return this.pathTemplates.contextPathTemplate.match(contextName).project;
    }
    /**
     * Parse the location from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromContextName(contextName) {
        return this.pathTemplates.contextPathTemplate.match(contextName).location;
    }
    /**
     * Parse the metadata_store from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the metadata_store.
     */
    matchMetadataStoreFromContextName(contextName) {
        return this.pathTemplates.contextPathTemplate.match(contextName)
            .metadata_store;
    }
    /**
     * Parse the context from Context resource.
     *
     * @param {string} contextName
     *   A fully-qualified path representing Context resource.
     * @returns {string} A string representing the context.
     */
    matchContextFromContextName(contextName) {
        return this.pathTemplates.contextPathTemplate.match(contextName).context;
    }
    /**
     * Return a fully-qualified customJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} custom_job
     * @returns {string} Resource name string.
     */
    customJobPath(project, location, customJob) {
        return this.pathTemplates.customJobPathTemplate.render({
            project: project,
            location: location,
            custom_job: customJob,
        });
    }
    /**
     * Parse the project from CustomJob resource.
     *
     * @param {string} customJobName
     *   A fully-qualified path representing CustomJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromCustomJobName(customJobName) {
        return this.pathTemplates.customJobPathTemplate.match(customJobName)
            .project;
    }
    /**
     * Parse the location from CustomJob resource.
     *
     * @param {string} customJobName
     *   A fully-qualified path representing CustomJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromCustomJobName(customJobName) {
        return this.pathTemplates.customJobPathTemplate.match(customJobName)
            .location;
    }
    /**
     * Parse the custom_job from CustomJob resource.
     *
     * @param {string} customJobName
     *   A fully-qualified path representing CustomJob resource.
     * @returns {string} A string representing the custom_job.
     */
    matchCustomJobFromCustomJobName(customJobName) {
        return this.pathTemplates.customJobPathTemplate.match(customJobName)
            .custom_job;
    }
    /**
     * Return a fully-qualified dataItem resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @param {string} data_item
     * @returns {string} Resource name string.
     */
    dataItemPath(project, location, dataset, dataItem) {
        return this.pathTemplates.dataItemPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
            data_item: dataItem,
        });
    }
    /**
     * Parse the project from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataItemName(dataItemName) {
        return this.pathTemplates.dataItemPathTemplate.match(dataItemName).project;
    }
    /**
     * Parse the location from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataItemName(dataItemName) {
        return this.pathTemplates.dataItemPathTemplate.match(dataItemName).location;
    }
    /**
     * Parse the dataset from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromDataItemName(dataItemName) {
        return this.pathTemplates.dataItemPathTemplate.match(dataItemName).dataset;
    }
    /**
     * Parse the data_item from DataItem resource.
     *
     * @param {string} dataItemName
     *   A fully-qualified path representing DataItem resource.
     * @returns {string} A string representing the data_item.
     */
    matchDataItemFromDataItemName(dataItemName) {
        return this.pathTemplates.dataItemPathTemplate.match(dataItemName)
            .data_item;
    }
    /**
     * Return a fully-qualified dataLabelingJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} data_labeling_job
     * @returns {string} Resource name string.
     */
    dataLabelingJobPath(project, location, dataLabelingJob) {
        return this.pathTemplates.dataLabelingJobPathTemplate.render({
            project: project,
            location: location,
            data_labeling_job: dataLabelingJob,
        });
    }
    /**
     * Parse the project from DataLabelingJob resource.
     *
     * @param {string} dataLabelingJobName
     *   A fully-qualified path representing DataLabelingJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDataLabelingJobName(dataLabelingJobName) {
        return this.pathTemplates.dataLabelingJobPathTemplate.match(dataLabelingJobName).project;
    }
    /**
     * Parse the location from DataLabelingJob resource.
     *
     * @param {string} dataLabelingJobName
     *   A fully-qualified path representing DataLabelingJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDataLabelingJobName(dataLabelingJobName) {
        return this.pathTemplates.dataLabelingJobPathTemplate.match(dataLabelingJobName).location;
    }
    /**
     * Parse the data_labeling_job from DataLabelingJob resource.
     *
     * @param {string} dataLabelingJobName
     *   A fully-qualified path representing DataLabelingJob resource.
     * @returns {string} A string representing the data_labeling_job.
     */
    matchDataLabelingJobFromDataLabelingJobName(dataLabelingJobName) {
        return this.pathTemplates.dataLabelingJobPathTemplate.match(dataLabelingJobName).data_labeling_job;
    }
    /**
     * Return a fully-qualified dataset resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} dataset
     * @returns {string} Resource name string.
     */
    datasetPath(project, location, dataset) {
        return this.pathTemplates.datasetPathTemplate.render({
            project: project,
            location: location,
            dataset: dataset,
        });
    }
    /**
     * Parse the project from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromDatasetName(datasetName) {
        return this.pathTemplates.datasetPathTemplate.match(datasetName).project;
    }
    /**
     * Parse the location from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromDatasetName(datasetName) {
        return this.pathTemplates.datasetPathTemplate.match(datasetName).location;
    }
    /**
     * Parse the dataset from Dataset resource.
     *
     * @param {string} datasetName
     *   A fully-qualified path representing Dataset resource.
     * @returns {string} A string representing the dataset.
     */
    matchDatasetFromDatasetName(datasetName) {
        return this.pathTemplates.datasetPathTemplate.match(datasetName).dataset;
    }
    /**
     * Return a fully-qualified endpoint resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} endpoint
     * @returns {string} Resource name string.
     */
    endpointPath(project, location, endpoint) {
        return this.pathTemplates.endpointPathTemplate.render({
            project: project,
            location: location,
            endpoint: endpoint,
        });
    }
    /**
     * Parse the project from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEndpointName(endpointName) {
        return this.pathTemplates.endpointPathTemplate.match(endpointName).project;
    }
    /**
     * Parse the location from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEndpointName(endpointName) {
        return this.pathTemplates.endpointPathTemplate.match(endpointName).location;
    }
    /**
     * Parse the endpoint from Endpoint resource.
     *
     * @param {string} endpointName
     *   A fully-qualified path representing Endpoint resource.
     * @returns {string} A string representing the endpoint.
     */
    matchEndpointFromEndpointName(endpointName) {
        return this.pathTemplates.endpointPathTemplate.match(endpointName).endpoint;
    }
    /**
     * Return a fully-qualified entityType resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} featurestore
     * @param {string} entity_type
     * @returns {string} Resource name string.
     */
    entityTypePath(project, location, featurestore, entityType) {
        return this.pathTemplates.entityTypePathTemplate.render({
            project: project,
            location: location,
            featurestore: featurestore,
            entity_type: entityType,
        });
    }
    /**
     * Parse the project from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .project;
    }
    /**
     * Parse the location from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .location;
    }
    /**
     * Parse the featurestore from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the featurestore.
     */
    matchFeaturestoreFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .featurestore;
    }
    /**
     * Parse the entity_type from EntityType resource.
     *
     * @param {string} entityTypeName
     *   A fully-qualified path representing EntityType resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromEntityTypeName(entityTypeName) {
        return this.pathTemplates.entityTypePathTemplate.match(entityTypeName)
            .entity_type;
    }
    /**
     * Return a fully-qualified execution resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} metadata_store
     * @param {string} execution
     * @returns {string} Resource name string.
     */
    executionPath(project, location, metadataStore, execution) {
        return this.pathTemplates.executionPathTemplate.render({
            project: project,
            location: location,
            metadata_store: metadataStore,
            execution: execution,
        });
    }
    /**
     * Parse the project from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromExecutionName(executionName) {
        return this.pathTemplates.executionPathTemplate.match(executionName)
            .project;
    }
    /**
     * Parse the location from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromExecutionName(executionName) {
        return this.pathTemplates.executionPathTemplate.match(executionName)
            .location;
    }
    /**
     * Parse the metadata_store from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the metadata_store.
     */
    matchMetadataStoreFromExecutionName(executionName) {
        return this.pathTemplates.executionPathTemplate.match(executionName)
            .metadata_store;
    }
    /**
     * Parse the execution from Execution resource.
     *
     * @param {string} executionName
     *   A fully-qualified path representing Execution resource.
     * @returns {string} A string representing the execution.
     */
    matchExecutionFromExecutionName(executionName) {
        return this.pathTemplates.executionPathTemplate.match(executionName)
            .execution;
    }
    /**
     * Return a fully-qualified feature resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} featurestore
     * @param {string} entity_type
     * @param {string} feature
     * @returns {string} Resource name string.
     */
    featurePath(project, location, featurestore, entityType, feature) {
        return this.pathTemplates.featurePathTemplate.render({
            project: project,
            location: location,
            featurestore: featurestore,
            entity_type: entityType,
            feature: feature,
        });
    }
    /**
     * Parse the project from Feature resource.
     *
     * @param {string} featureName
     *   A fully-qualified path representing Feature resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFeatureName(featureName) {
        return this.pathTemplates.featurePathTemplate.match(featureName).project;
    }
    /**
     * Parse the location from Feature resource.
     *
     * @param {string} featureName
     *   A fully-qualified path representing Feature resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFeatureName(featureName) {
        return this.pathTemplates.featurePathTemplate.match(featureName).location;
    }
    /**
     * Parse the featurestore from Feature resource.
     *
     * @param {string} featureName
     *   A fully-qualified path representing Feature resource.
     * @returns {string} A string representing the featurestore.
     */
    matchFeaturestoreFromFeatureName(featureName) {
        return this.pathTemplates.featurePathTemplate.match(featureName)
            .featurestore;
    }
    /**
     * Parse the entity_type from Feature resource.
     *
     * @param {string} featureName
     *   A fully-qualified path representing Feature resource.
     * @returns {string} A string representing the entity_type.
     */
    matchEntityTypeFromFeatureName(featureName) {
        return this.pathTemplates.featurePathTemplate.match(featureName)
            .entity_type;
    }
    /**
     * Parse the feature from Feature resource.
     *
     * @param {string} featureName
     *   A fully-qualified path representing Feature resource.
     * @returns {string} A string representing the feature.
     */
    matchFeatureFromFeatureName(featureName) {
        return this.pathTemplates.featurePathTemplate.match(featureName).feature;
    }
    /**
     * Return a fully-qualified featurestore resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} featurestore
     * @returns {string} Resource name string.
     */
    featurestorePath(project, location, featurestore) {
        return this.pathTemplates.featurestorePathTemplate.render({
            project: project,
            location: location,
            featurestore: featurestore,
        });
    }
    /**
     * Parse the project from Featurestore resource.
     *
     * @param {string} featurestoreName
     *   A fully-qualified path representing Featurestore resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromFeaturestoreName(featurestoreName) {
        return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
            .project;
    }
    /**
     * Parse the location from Featurestore resource.
     *
     * @param {string} featurestoreName
     *   A fully-qualified path representing Featurestore resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromFeaturestoreName(featurestoreName) {
        return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
            .location;
    }
    /**
     * Parse the featurestore from Featurestore resource.
     *
     * @param {string} featurestoreName
     *   A fully-qualified path representing Featurestore resource.
     * @returns {string} A string representing the featurestore.
     */
    matchFeaturestoreFromFeaturestoreName(featurestoreName) {
        return this.pathTemplates.featurestorePathTemplate.match(featurestoreName)
            .featurestore;
    }
    /**
     * Return a fully-qualified hyperparameterTuningJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} hyperparameter_tuning_job
     * @returns {string} Resource name string.
     */
    hyperparameterTuningJobPath(project, location, hyperparameterTuningJob) {
        return this.pathTemplates.hyperparameterTuningJobPathTemplate.render({
            project: project,
            location: location,
            hyperparameter_tuning_job: hyperparameterTuningJob,
        });
    }
    /**
     * Parse the project from HyperparameterTuningJob resource.
     *
     * @param {string} hyperparameterTuningJobName
     *   A fully-qualified path representing HyperparameterTuningJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromHyperparameterTuningJobName(hyperparameterTuningJobName) {
        return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(hyperparameterTuningJobName).project;
    }
    /**
     * Parse the location from HyperparameterTuningJob resource.
     *
     * @param {string} hyperparameterTuningJobName
     *   A fully-qualified path representing HyperparameterTuningJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromHyperparameterTuningJobName(hyperparameterTuningJobName) {
        return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(hyperparameterTuningJobName).location;
    }
    /**
     * Parse the hyperparameter_tuning_job from HyperparameterTuningJob resource.
     *
     * @param {string} hyperparameterTuningJobName
     *   A fully-qualified path representing HyperparameterTuningJob resource.
     * @returns {string} A string representing the hyperparameter_tuning_job.
     */
    matchHyperparameterTuningJobFromHyperparameterTuningJobName(hyperparameterTuningJobName) {
        return this.pathTemplates.hyperparameterTuningJobPathTemplate.match(hyperparameterTuningJobName).hyperparameter_tuning_job;
    }
    /**
     * Return a fully-qualified index resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} index
     * @returns {string} Resource name string.
     */
    indexPath(project, location, index) {
        return this.pathTemplates.indexPathTemplate.render({
            project: project,
            location: location,
            index: index,
        });
    }
    /**
     * Parse the project from Index resource.
     *
     * @param {string} indexName
     *   A fully-qualified path representing Index resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromIndexName(indexName) {
        return this.pathTemplates.indexPathTemplate.match(indexName).project;
    }
    /**
     * Parse the location from Index resource.
     *
     * @param {string} indexName
     *   A fully-qualified path representing Index resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromIndexName(indexName) {
        return this.pathTemplates.indexPathTemplate.match(indexName).location;
    }
    /**
     * Parse the index from Index resource.
     *
     * @param {string} indexName
     *   A fully-qualified path representing Index resource.
     * @returns {string} A string representing the index.
     */
    matchIndexFromIndexName(indexName) {
        return this.pathTemplates.indexPathTemplate.match(indexName).index;
    }
    /**
     * Return a fully-qualified indexEndpoint resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} index_endpoint
     * @returns {string} Resource name string.
     */
    indexEndpointPath(project, location, indexEndpoint) {
        return this.pathTemplates.indexEndpointPathTemplate.render({
            project: project,
            location: location,
            index_endpoint: indexEndpoint,
        });
    }
    /**
     * Parse the project from IndexEndpoint resource.
     *
     * @param {string} indexEndpointName
     *   A fully-qualified path representing IndexEndpoint resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromIndexEndpointName(indexEndpointName) {
        return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
            .project;
    }
    /**
     * Parse the location from IndexEndpoint resource.
     *
     * @param {string} indexEndpointName
     *   A fully-qualified path representing IndexEndpoint resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromIndexEndpointName(indexEndpointName) {
        return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
            .location;
    }
    /**
     * Parse the index_endpoint from IndexEndpoint resource.
     *
     * @param {string} indexEndpointName
     *   A fully-qualified path representing IndexEndpoint resource.
     * @returns {string} A string representing the index_endpoint.
     */
    matchIndexEndpointFromIndexEndpointName(indexEndpointName) {
        return this.pathTemplates.indexEndpointPathTemplate.match(indexEndpointName)
            .index_endpoint;
    }
    /**
     * Return a fully-qualified location resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @returns {string} Resource name string.
     */
    locationPath(project, location) {
        return this.pathTemplates.locationPathTemplate.render({
            project: project,
            location: location,
        });
    }
    /**
     * Parse the project from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).project;
    }
    /**
     * Parse the location from Location resource.
     *
     * @param {string} locationName
     *   A fully-qualified path representing Location resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromLocationName(locationName) {
        return this.pathTemplates.locationPathTemplate.match(locationName).location;
    }
    /**
     * Return a fully-qualified metadataSchema resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} metadata_store
     * @param {string} metadata_schema
     * @returns {string} Resource name string.
     */
    metadataSchemaPath(project, location, metadataStore, metadataSchema) {
        return this.pathTemplates.metadataSchemaPathTemplate.render({
            project: project,
            location: location,
            metadata_store: metadataStore,
            metadata_schema: metadataSchema,
        });
    }
    /**
     * Parse the project from MetadataSchema resource.
     *
     * @param {string} metadataSchemaName
     *   A fully-qualified path representing MetadataSchema resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromMetadataSchemaName(metadataSchemaName) {
        return this.pathTemplates.metadataSchemaPathTemplate.match(metadataSchemaName).project;
    }
    /**
     * Parse the location from MetadataSchema resource.
     *
     * @param {string} metadataSchemaName
     *   A fully-qualified path representing MetadataSchema resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromMetadataSchemaName(metadataSchemaName) {
        return this.pathTemplates.metadataSchemaPathTemplate.match(metadataSchemaName).location;
    }
    /**
     * Parse the metadata_store from MetadataSchema resource.
     *
     * @param {string} metadataSchemaName
     *   A fully-qualified path representing MetadataSchema resource.
     * @returns {string} A string representing the metadata_store.
     */
    matchMetadataStoreFromMetadataSchemaName(metadataSchemaName) {
        return this.pathTemplates.metadataSchemaPathTemplate.match(metadataSchemaName).metadata_store;
    }
    /**
     * Parse the metadata_schema from MetadataSchema resource.
     *
     * @param {string} metadataSchemaName
     *   A fully-qualified path representing MetadataSchema resource.
     * @returns {string} A string representing the metadata_schema.
     */
    matchMetadataSchemaFromMetadataSchemaName(metadataSchemaName) {
        return this.pathTemplates.metadataSchemaPathTemplate.match(metadataSchemaName).metadata_schema;
    }
    /**
     * Return a fully-qualified metadataStore resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} metadata_store
     * @returns {string} Resource name string.
     */
    metadataStorePath(project, location, metadataStore) {
        return this.pathTemplates.metadataStorePathTemplate.render({
            project: project,
            location: location,
            metadata_store: metadataStore,
        });
    }
    /**
     * Parse the project from MetadataStore resource.
     *
     * @param {string} metadataStoreName
     *   A fully-qualified path representing MetadataStore resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromMetadataStoreName(metadataStoreName) {
        return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
            .project;
    }
    /**
     * Parse the location from MetadataStore resource.
     *
     * @param {string} metadataStoreName
     *   A fully-qualified path representing MetadataStore resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromMetadataStoreName(metadataStoreName) {
        return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
            .location;
    }
    /**
     * Parse the metadata_store from MetadataStore resource.
     *
     * @param {string} metadataStoreName
     *   A fully-qualified path representing MetadataStore resource.
     * @returns {string} A string representing the metadata_store.
     */
    matchMetadataStoreFromMetadataStoreName(metadataStoreName) {
        return this.pathTemplates.metadataStorePathTemplate.match(metadataStoreName)
            .metadata_store;
    }
    /**
     * Return a fully-qualified model resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model
     * @returns {string} Resource name string.
     */
    modelPath(project, location, model) {
        return this.pathTemplates.modelPathTemplate.render({
            project: project,
            location: location,
            model: model,
        });
    }
    /**
     * Parse the project from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).project;
    }
    /**
     * Parse the location from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).location;
    }
    /**
     * Parse the model from Model resource.
     *
     * @param {string} modelName
     *   A fully-qualified path representing Model resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelName(modelName) {
        return this.pathTemplates.modelPathTemplate.match(modelName).model;
    }
    /**
     * Return a fully-qualified modelDeploymentMonitoringJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model_deployment_monitoring_job
     * @returns {string} Resource name string.
     */
    modelDeploymentMonitoringJobPath(project, location, modelDeploymentMonitoringJob) {
        return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.render({
            project: project,
            location: location,
            model_deployment_monitoring_job: modelDeploymentMonitoringJob,
        });
    }
    /**
     * Parse the project from ModelDeploymentMonitoringJob resource.
     *
     * @param {string} modelDeploymentMonitoringJobName
     *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelDeploymentMonitoringJobName(modelDeploymentMonitoringJobName) {
        return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(modelDeploymentMonitoringJobName).project;
    }
    /**
     * Parse the location from ModelDeploymentMonitoringJob resource.
     *
     * @param {string} modelDeploymentMonitoringJobName
     *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelDeploymentMonitoringJobName(modelDeploymentMonitoringJobName) {
        return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(modelDeploymentMonitoringJobName).location;
    }
    /**
     * Parse the model_deployment_monitoring_job from ModelDeploymentMonitoringJob resource.
     *
     * @param {string} modelDeploymentMonitoringJobName
     *   A fully-qualified path representing ModelDeploymentMonitoringJob resource.
     * @returns {string} A string representing the model_deployment_monitoring_job.
     */
    matchModelDeploymentMonitoringJobFromModelDeploymentMonitoringJobName(modelDeploymentMonitoringJobName) {
        return this.pathTemplates.modelDeploymentMonitoringJobPathTemplate.match(modelDeploymentMonitoringJobName).model_deployment_monitoring_job;
    }
    /**
     * Return a fully-qualified modelEvaluation resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model
     * @param {string} evaluation
     * @returns {string} Resource name string.
     */
    modelEvaluationPath(project, location, model, evaluation) {
        return this.pathTemplates.modelEvaluationPathTemplate.render({
            project: project,
            location: location,
            model: model,
            evaluation: evaluation,
        });
    }
    /**
     * Parse the project from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).project;
    }
    /**
     * Parse the location from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).location;
    }
    /**
     * Parse the model from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).model;
    }
    /**
     * Parse the evaluation from ModelEvaluation resource.
     *
     * @param {string} modelEvaluationName
     *   A fully-qualified path representing ModelEvaluation resource.
     * @returns {string} A string representing the evaluation.
     */
    matchEvaluationFromModelEvaluationName(modelEvaluationName) {
        return this.pathTemplates.modelEvaluationPathTemplate.match(modelEvaluationName).evaluation;
    }
    /**
     * Return a fully-qualified modelEvaluationSlice resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} model
     * @param {string} evaluation
     * @param {string} slice
     * @returns {string} Resource name string.
     */
    modelEvaluationSlicePath(project, location, model, evaluation, slice) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.render({
            project: project,
            location: location,
            model: model,
            evaluation: evaluation,
            slice: slice,
        });
    }
    /**
     * Parse the project from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromModelEvaluationSliceName(modelEvaluationSliceName) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.match(modelEvaluationSliceName).project;
    }
    /**
     * Parse the location from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromModelEvaluationSliceName(modelEvaluationSliceName) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.match(modelEvaluationSliceName).location;
    }
    /**
     * Parse the model from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the model.
     */
    matchModelFromModelEvaluationSliceName(modelEvaluationSliceName) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.match(modelEvaluationSliceName).model;
    }
    /**
     * Parse the evaluation from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the evaluation.
     */
    matchEvaluationFromModelEvaluationSliceName(modelEvaluationSliceName) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.match(modelEvaluationSliceName).evaluation;
    }
    /**
     * Parse the slice from ModelEvaluationSlice resource.
     *
     * @param {string} modelEvaluationSliceName
     *   A fully-qualified path representing ModelEvaluationSlice resource.
     * @returns {string} A string representing the slice.
     */
    matchSliceFromModelEvaluationSliceName(modelEvaluationSliceName) {
        return this.pathTemplates.modelEvaluationSlicePathTemplate.match(modelEvaluationSliceName).slice;
    }
    /**
     * Return a fully-qualified pipelineJob resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} pipeline_job
     * @returns {string} Resource name string.
     */
    pipelineJobPath(project, location, pipelineJob) {
        return this.pathTemplates.pipelineJobPathTemplate.render({
            project: project,
            location: location,
            pipeline_job: pipelineJob,
        });
    }
    /**
     * Parse the project from PipelineJob resource.
     *
     * @param {string} pipelineJobName
     *   A fully-qualified path representing PipelineJob resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromPipelineJobName(pipelineJobName) {
        return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
            .project;
    }
    /**
     * Parse the location from PipelineJob resource.
     *
     * @param {string} pipelineJobName
     *   A fully-qualified path representing PipelineJob resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromPipelineJobName(pipelineJobName) {
        return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
            .location;
    }
    /**
     * Parse the pipeline_job from PipelineJob resource.
     *
     * @param {string} pipelineJobName
     *   A fully-qualified path representing PipelineJob resource.
     * @returns {string} A string representing the pipeline_job.
     */
    matchPipelineJobFromPipelineJobName(pipelineJobName) {
        return this.pathTemplates.pipelineJobPathTemplate.match(pipelineJobName)
            .pipeline_job;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified specialistPool resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} specialist_pool
     * @returns {string} Resource name string.
     */
    specialistPoolPath(project, location, specialistPool) {
        return this.pathTemplates.specialistPoolPathTemplate.render({
            project: project,
            location: location,
            specialist_pool: specialistPool,
        });
    }
    /**
     * Parse the project from SpecialistPool resource.
     *
     * @param {string} specialistPoolName
     *   A fully-qualified path representing SpecialistPool resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSpecialistPoolName(specialistPoolName) {
        return this.pathTemplates.specialistPoolPathTemplate.match(specialistPoolName).project;
    }
    /**
     * Parse the location from SpecialistPool resource.
     *
     * @param {string} specialistPoolName
     *   A fully-qualified path representing SpecialistPool resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromSpecialistPoolName(specialistPoolName) {
        return this.pathTemplates.specialistPoolPathTemplate.match(specialistPoolName).location;
    }
    /**
     * Parse the specialist_pool from SpecialistPool resource.
     *
     * @param {string} specialistPoolName
     *   A fully-qualified path representing SpecialistPool resource.
     * @returns {string} A string representing the specialist_pool.
     */
    matchSpecialistPoolFromSpecialistPoolName(specialistPoolName) {
        return this.pathTemplates.specialistPoolPathTemplate.match(specialistPoolName).specialist_pool;
    }
    /**
     * Return a fully-qualified study resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} study
     * @returns {string} Resource name string.
     */
    studyPath(project, location, study) {
        return this.pathTemplates.studyPathTemplate.render({
            project: project,
            location: location,
            study: study,
        });
    }
    /**
     * Parse the project from Study resource.
     *
     * @param {string} studyName
     *   A fully-qualified path representing Study resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromStudyName(studyName) {
        return this.pathTemplates.studyPathTemplate.match(studyName).project;
    }
    /**
     * Parse the location from Study resource.
     *
     * @param {string} studyName
     *   A fully-qualified path representing Study resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromStudyName(studyName) {
        return this.pathTemplates.studyPathTemplate.match(studyName).location;
    }
    /**
     * Parse the study from Study resource.
     *
     * @param {string} studyName
     *   A fully-qualified path representing Study resource.
     * @returns {string} A string representing the study.
     */
    matchStudyFromStudyName(studyName) {
        return this.pathTemplates.studyPathTemplate.match(studyName).study;
    }
    /**
     * Return a fully-qualified tensorboard resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} tensorboard
     * @returns {string} Resource name string.
     */
    tensorboardPath(project, location, tensorboard) {
        return this.pathTemplates.tensorboardPathTemplate.render({
            project: project,
            location: location,
            tensorboard: tensorboard,
        });
    }
    /**
     * Parse the project from Tensorboard resource.
     *
     * @param {string} tensorboardName
     *   A fully-qualified path representing Tensorboard resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTensorboardName(tensorboardName) {
        return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
            .project;
    }
    /**
     * Parse the location from Tensorboard resource.
     *
     * @param {string} tensorboardName
     *   A fully-qualified path representing Tensorboard resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTensorboardName(tensorboardName) {
        return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
            .location;
    }
    /**
     * Parse the tensorboard from Tensorboard resource.
     *
     * @param {string} tensorboardName
     *   A fully-qualified path representing Tensorboard resource.
     * @returns {string} A string representing the tensorboard.
     */
    matchTensorboardFromTensorboardName(tensorboardName) {
        return this.pathTemplates.tensorboardPathTemplate.match(tensorboardName)
            .tensorboard;
    }
    /**
     * Return a fully-qualified tensorboardExperiment resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} tensorboard
     * @param {string} experiment
     * @returns {string} Resource name string.
     */
    tensorboardExperimentPath(project, location, tensorboard, experiment) {
        return this.pathTemplates.tensorboardExperimentPathTemplate.render({
            project: project,
            location: location,
            tensorboard: tensorboard,
            experiment: experiment,
        });
    }
    /**
     * Parse the project from TensorboardExperiment resource.
     *
     * @param {string} tensorboardExperimentName
     *   A fully-qualified path representing TensorboardExperiment resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTensorboardExperimentName(tensorboardExperimentName) {
        return this.pathTemplates.tensorboardExperimentPathTemplate.match(tensorboardExperimentName).project;
    }
    /**
     * Parse the location from TensorboardExperiment resource.
     *
     * @param {string} tensorboardExperimentName
     *   A fully-qualified path representing TensorboardExperiment resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTensorboardExperimentName(tensorboardExperimentName) {
        return this.pathTemplates.tensorboardExperimentPathTemplate.match(tensorboardExperimentName).location;
    }
    /**
     * Parse the tensorboard from TensorboardExperiment resource.
     *
     * @param {string} tensorboardExperimentName
     *   A fully-qualified path representing TensorboardExperiment resource.
     * @returns {string} A string representing the tensorboard.
     */
    matchTensorboardFromTensorboardExperimentName(tensorboardExperimentName) {
        return this.pathTemplates.tensorboardExperimentPathTemplate.match(tensorboardExperimentName).tensorboard;
    }
    /**
     * Parse the experiment from TensorboardExperiment resource.
     *
     * @param {string} tensorboardExperimentName
     *   A fully-qualified path representing TensorboardExperiment resource.
     * @returns {string} A string representing the experiment.
     */
    matchExperimentFromTensorboardExperimentName(tensorboardExperimentName) {
        return this.pathTemplates.tensorboardExperimentPathTemplate.match(tensorboardExperimentName).experiment;
    }
    /**
     * Return a fully-qualified tensorboardRun resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} tensorboard
     * @param {string} experiment
     * @param {string} run
     * @returns {string} Resource name string.
     */
    tensorboardRunPath(project, location, tensorboard, experiment, run) {
        return this.pathTemplates.tensorboardRunPathTemplate.render({
            project: project,
            location: location,
            tensorboard: tensorboard,
            experiment: experiment,
            run: run,
        });
    }
    /**
     * Parse the project from TensorboardRun resource.
     *
     * @param {string} tensorboardRunName
     *   A fully-qualified path representing TensorboardRun resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTensorboardRunName(tensorboardRunName) {
        return this.pathTemplates.tensorboardRunPathTemplate.match(tensorboardRunName).project;
    }
    /**
     * Parse the location from TensorboardRun resource.
     *
     * @param {string} tensorboardRunName
     *   A fully-qualified path representing TensorboardRun resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTensorboardRunName(tensorboardRunName) {
        return this.pathTemplates.tensorboardRunPathTemplate.match(tensorboardRunName).location;
    }
    /**
     * Parse the tensorboard from TensorboardRun resource.
     *
     * @param {string} tensorboardRunName
     *   A fully-qualified path representing TensorboardRun resource.
     * @returns {string} A string representing the tensorboard.
     */
    matchTensorboardFromTensorboardRunName(tensorboardRunName) {
        return this.pathTemplates.tensorboardRunPathTemplate.match(tensorboardRunName).tensorboard;
    }
    /**
     * Parse the experiment from TensorboardRun resource.
     *
     * @param {string} tensorboardRunName
     *   A fully-qualified path representing TensorboardRun resource.
     * @returns {string} A string representing the experiment.
     */
    matchExperimentFromTensorboardRunName(tensorboardRunName) {
        return this.pathTemplates.tensorboardRunPathTemplate.match(tensorboardRunName).experiment;
    }
    /**
     * Parse the run from TensorboardRun resource.
     *
     * @param {string} tensorboardRunName
     *   A fully-qualified path representing TensorboardRun resource.
     * @returns {string} A string representing the run.
     */
    matchRunFromTensorboardRunName(tensorboardRunName) {
        return this.pathTemplates.tensorboardRunPathTemplate.match(tensorboardRunName).run;
    }
    /**
     * Return a fully-qualified tensorboardTimeSeries resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} tensorboard
     * @param {string} experiment
     * @param {string} run
     * @param {string} time_series
     * @returns {string} Resource name string.
     */
    tensorboardTimeSeriesPath(project, location, tensorboard, experiment, run, timeSeries) {
        return this.pathTemplates.tensorboardTimeSeriesPathTemplate.render({
            project: project,
            location: location,
            tensorboard: tensorboard,
            experiment: experiment,
            run: run,
            time_series: timeSeries,
        });
    }
    /**
     * Parse the project from TensorboardTimeSeries resource.
     *
     * @param {string} tensorboardTimeSeriesName
     *   A fully-qualified path representing TensorboardTimeSeries resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTensorboardTimeSeriesName(tensorboardTimeSeriesName) {
        return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(tensorboardTimeSeriesName).project;
    }
    /**
     * Parse the location from TensorboardTimeSeries resource.
     *
     * @param {string} tensorboardTimeSeriesName
     *   A fully-qualified path representing TensorboardTimeSeries resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTensorboardTimeSeriesName(tensorboardTimeSeriesName) {
        return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(tensorboardTimeSeriesName).location;
    }
    /**
     * Parse the tensorboard from TensorboardTimeSeries resource.
     *
     * @param {string} tensorboardTimeSeriesName
     *   A fully-qualified path representing TensorboardTimeSeries resource.
     * @returns {string} A string representing the tensorboard.
     */
    matchTensorboardFromTensorboardTimeSeriesName(tensorboardTimeSeriesName) {
        return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(tensorboardTimeSeriesName).tensorboard;
    }
    /**
     * Parse the experiment from TensorboardTimeSeries resource.
     *
     * @param {string} tensorboardTimeSeriesName
     *   A fully-qualified path representing TensorboardTimeSeries resource.
     * @returns {string} A string representing the experiment.
     */
    matchExperimentFromTensorboardTimeSeriesName(tensorboardTimeSeriesName) {
        return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(tensorboardTimeSeriesName).experiment;
    }
    /**
     * Parse the run from TensorboardTimeSeries resource.
     *
     * @param {string} tensorboardTimeSeriesName
     *   A fully-qualified path representing TensorboardTimeSeries resource.
     * @returns {string} A string representing the run.
     */
    matchRunFromTensorboardTimeSeriesName(tensorboardTimeSeriesName) {
        return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(tensorboardTimeSeriesName).run;
    }
    /**
     * Parse the time_series from TensorboardTimeSeries resource.
     *
     * @param {string} tensorboardTimeSeriesName
     *   A fully-qualified path representing TensorboardTimeSeries resource.
     * @returns {string} A string representing the time_series.
     */
    matchTimeSeriesFromTensorboardTimeSeriesName(tensorboardTimeSeriesName) {
        return this.pathTemplates.tensorboardTimeSeriesPathTemplate.match(tensorboardTimeSeriesName).time_series;
    }
    /**
     * Return a fully-qualified trainingPipeline resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} training_pipeline
     * @returns {string} Resource name string.
     */
    trainingPipelinePath(project, location, trainingPipeline) {
        return this.pathTemplates.trainingPipelinePathTemplate.render({
            project: project,
            location: location,
            training_pipeline: trainingPipeline,
        });
    }
    /**
     * Parse the project from TrainingPipeline resource.
     *
     * @param {string} trainingPipelineName
     *   A fully-qualified path representing TrainingPipeline resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTrainingPipelineName(trainingPipelineName) {
        return this.pathTemplates.trainingPipelinePathTemplate.match(trainingPipelineName).project;
    }
    /**
     * Parse the location from TrainingPipeline resource.
     *
     * @param {string} trainingPipelineName
     *   A fully-qualified path representing TrainingPipeline resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTrainingPipelineName(trainingPipelineName) {
        return this.pathTemplates.trainingPipelinePathTemplate.match(trainingPipelineName).location;
    }
    /**
     * Parse the training_pipeline from TrainingPipeline resource.
     *
     * @param {string} trainingPipelineName
     *   A fully-qualified path representing TrainingPipeline resource.
     * @returns {string} A string representing the training_pipeline.
     */
    matchTrainingPipelineFromTrainingPipelineName(trainingPipelineName) {
        return this.pathTemplates.trainingPipelinePathTemplate.match(trainingPipelineName).training_pipeline;
    }
    /**
     * Return a fully-qualified trial resource name string.
     *
     * @param {string} project
     * @param {string} location
     * @param {string} study
     * @param {string} trial
     * @returns {string} Resource name string.
     */
    trialPath(project, location, study, trial) {
        return this.pathTemplates.trialPathTemplate.render({
            project: project,
            location: location,
            study: study,
            trial: trial,
        });
    }
    /**
     * Parse the project from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTrialName(trialName) {
        return this.pathTemplates.trialPathTemplate.match(trialName).project;
    }
    /**
     * Parse the location from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the location.
     */
    matchLocationFromTrialName(trialName) {
        return this.pathTemplates.trialPathTemplate.match(trialName).location;
    }
    /**
     * Parse the study from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the study.
     */
    matchStudyFromTrialName(trialName) {
        return this.pathTemplates.trialPathTemplate.match(trialName).study;
    }
    /**
     * Parse the trial from Trial resource.
     *
     * @param {string} trialName
     *   A fully-qualified path representing Trial resource.
     * @returns {string} A string representing the trial.
     */
    matchTrialFromTrialName(trialName) {
        return this.pathTemplates.trialPathTemplate.match(trialName).trial;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        this.initialize();
        if (!this._terminated) {
            return this.metadataServiceStub.then(stub => {
                this._terminated = true;
                stub.close();
            });
        }
        return Promise.resolve();
    }
}
exports.MetadataServiceClient = MetadataServiceClient;
//# sourceMappingURL=metadata_service_client.js.map